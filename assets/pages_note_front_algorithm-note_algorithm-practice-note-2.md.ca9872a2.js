import{_ as s,o as n,c as a,e as l}from"./app.c2840162.js";const u=JSON.parse('{"title":"完成 extname 函数","description":"","frontmatter":{},"headers":[],"relativePath":"pages/note/front/algorithm-note/algorithm-practice-note-2.md","filePath":"pages/note/front/algorithm-note/algorithm-practice-note-2.md","lastUpdated":1700126610000}'),p={name:"pages/note/front/algorithm-note/algorithm-practice-note-2.md"},o=l(`<h1 id="完成-extname-函数" tabindex="-1">完成 extname 函数 <a class="header-anchor" href="#完成-extname-函数" aria-label="Permalink to &quot;完成 extname 函数&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><blockquote><p><a href="https://zmx2321.github.io/blog_code/algorithm/other/example/other/extname%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">代码笔记</a></p></blockquote><p>完成 extname 函数，它会接受一个文件名作为参数，你需要返回它的扩展名。</p><p>例如，输入 emoji.png，返回 .png</p><h2 id="解答" tabindex="-1">解答 <a class="header-anchor" href="#解答" aria-label="Permalink to &quot;解答&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">    * 通过正则（）获取后缀</span></span>
<span class="line"><span style="color:#6A737D;">    * </span></span>
<span class="line"><span style="color:#6A737D;">    * . 除了换行符之外的任意字符</span></span>
<span class="line"><span style="color:#6A737D;">    * + 重复一次或一次以上</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> matchList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filename.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)(</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#79B8FF;">[a-zA-Z]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 匹配捕获任意字符出现一次或一次以上，后面连接&quot;.任意字母&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> matchList </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> matchList[matchList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// 判断捕获后的数据,如果存在数组(不为null)，则值取数组索引length-1，否则值为空</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;emoji.png&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res1);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res3);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">filename</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">    * 通过正则（）获取后缀</span></span>
<span class="line"><span style="color:#6A737D;">    * </span></span>
<span class="line"><span style="color:#6A737D;">    * . 除了换行符之外的任意字符</span></span>
<span class="line"><span style="color:#6A737D;">    * + 重复一次或一次以上</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> matchList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> filename.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)(</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#005CC5;">[a-zA-Z]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 匹配捕获任意字符出现一次或一次以上，后面连接&quot;.任意字母&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> matchList </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> matchList[matchList.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// 判断捕获后的数据,如果存在数组(不为null)，则值取数组索引length-1，否则值为空</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;emoji.png&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res1);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res3);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,7),e=[o];function t(r,c,y,E,i,m){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
