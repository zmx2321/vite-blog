import{_ as n,r as a,o as l,c as p,a as o,e}from"./app.36bf5bb5.js";const m=JSON.parse('{"title":"V8如何提升对象属性访问速度","description":"","frontmatter":{},"headers":[],"relativePath":"pages/note/front/v8-note/v8-note-4.md","filePath":"pages/note/front/v8-note/v8-note-4.md","lastUpdated":1701139563000}'),t={name:"pages/note/front/v8-note/v8-note-4.md"},r=e(`<h1 id="v8如何提升对象属性访问速度" tabindex="-1">V8如何提升对象属性访问速度 <a class="header-anchor" href="#v8如何提升对象属性访问速度" aria-label="Permalink to &quot;V8如何提升对象属性访问速度&quot;">​</a></h1><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><ul><li>JavaScript 中的对象是由一组组属性和值的集合，从 JavaScript 语言的角度来看，JavaScript 对象像一个字典，字符串作为键名，任意对象可以作为键值，可以通过键名读写键值。</li><li>然而在 V8 实现对象存储时，并没有完全采用字典的存储方式，这主要是出于性能的考量。因为字典是非线性的数据结构，查询效率会低于线性的数据结构</li><li>V8 为了提升存储和查找效率，采用了一套复杂的存储策略。 <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-1.png" alt="线性结构和非线性结构"></li><li>接下来我们就来分析下 V8 采用了哪些策略提升了对象属性的访问速度</li></ul><h2 id="对象中的常规属性和排序属性" tabindex="-1">对象中的常规属性和排序属性 <a class="header-anchor" href="#对象中的常规属性和排序属性" aria-label="Permalink to &quot;对象中的常规属性和排序属性&quot;">​</a></h2><blockquote><p>常规属性 (properties) 排序属性 (element)</p></blockquote><ul><li>我们以代码的形式解释常规属性和排序属性</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test-100&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test-1&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar-B&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test-50&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;test-9&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test-8&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test-3&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test-5&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar-A&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar-C&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> bar){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`index:\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}  value:\${</span><span style="color:#E1E4E8;">bar</span><span style="color:#9ECBFF;">[</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test-100&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test-1&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar-B&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test-50&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;test-9&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test-8&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test-3&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test-5&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar-A&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar-C&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> bar){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`index:\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}  value:\${</span><span style="color:#24292E;">bar</span><span style="color:#032F62;">[</span><span style="color:#24292E;">key</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>在上面这段代码中，我们利用构造函数 Foo 创建了一个 bar 对象，</li><li>在构造函数中，我们给 bar 对象设置了很多属性，包括了数字属性和字符串属性，</li><li>然后我们枚举出来了 bar 对象中所有的属性，并将其一一打印出来，下面就是执行这段代码所打印出来的结果：</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:test</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:test</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:test</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:test</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:test</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:test</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">50</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:test</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:bar</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">B</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:bar</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">A</span></span>
<span class="line"><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">:bar</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">C</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:test</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:test</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:test</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:test</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:test</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:test</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">50</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:test</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">B</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:bar</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">B</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">A</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:bar</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">A</span></span>
<span class="line"><span style="color:#6F42C1;">index</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">C</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">:bar</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">C</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>观察这段打印出来的数据，我们发现打印出来的属性顺序并不是我们设置的顺序，</li><li>我们设置属性的时候是乱序设置的，比如开始先设置 100，然后又设置了 1，但是输出的内容却非常规律，总的来说体现在以下两点： <ul><li>设置的数字属性被最先打印出来了，并且是按照数字大小的顺序打印的；</li><li>设置的字符串属性依然是按照之前的设置顺序打印的，比如我们是按照 B、A、C 的顺序设置的，打印出来依然是这个顺序。 <ul><li>之所以出现这样的结果，是因为在 ECMAScript 规范中定义了数字属性应该按照索引值大小升序排列，字符串属性根据创建时的顺序升序排列。</li></ul></li></ul></li><li>在这里我们把对象中的数字属性称为排序属性，在 V8 中被称为 elements，</li><li>字符串属性就被称为常规属性，在 V8 中被称为 properties。</li><li>在 V8 内部，为了有效地提升存储和访问这两种属性的性能，分别使用了两个线性数据结构来分别保存排序属性和常规属性，具体结构如下图所示： <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-2.png" alt="V8内部的对象构造"></li><li>通过上图我们可以发现，bar 对象包含了两个隐藏属性： <ul><li>elements 属性和 properties 属性， <ul><li>elements 属性指向了 elements 对象，在 elements 对象中，会按照顺序存放排序属性，</li><li>properties 属性则指向了 properties 对象，在 properties 对象中，会按照创建时的顺序保存了常规属性。</li></ul></li></ul></li><li>分解成这两种线性数据结构之后，如果执行索引操作，那么 V8 会先从 elements 属性中按照顺序读取所有的元素，</li><li>然后再在 properties 属性中读取所有的元素，这样就完成一次索引操作。</li></ul><h2 id="快属性和慢属性" tabindex="-1">快属性和慢属性 <a class="header-anchor" href="#快属性和慢属性" aria-label="Permalink to &quot;快属性和慢属性&quot;">​</a></h2><ul><li>将不同的属性分别保存到 elements 属性和 properties 属性中，无疑简化了程序的复杂度，</li><li>但是在查找元素时，却多了一步操作， <ul><li>比如执行 bar.B这个语句来查找 B 的属性值，那么在 V8 会先查找出 properties 属性所指向的对象 properties，</li><li>然后再在 properties 对象中查找 B 属性，这种方式在查找过程中增加了一步操作，因此会影响到元素的查找效率。</li></ul></li><li>基于这个原因，V8 采取了一个权衡的策略以加快查找属性的效率，这个策略是将部分常规属性直接存储到对象本身，我们把这称为对象内属性 (in-object properties)。</li><li>对象在内存中的展现形式你可以参看下图： <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-3.png" alt="对象内属性"></li><li>采用对象内属性之后，常规属性就被保存到 bar 对象本身了，</li><li>这样当再次使用bar.B来查找 B 的属性值时，V8 就可以直接从 bar 对象本身去获取该值就可以了，这种方式减少查找属性值的步骤，增加了查找效率。</li><li>不过对象内属性的数量是固定的，默认是 10 个，如果添加的属性超出了对象分配的空间，则它们将被保存在常规属性存储中。</li><li>虽然属性存储多了一层间接层，但可以自由地扩容。</li><li>通常，我们将保存在线性数据结构中的属性称之为“快属性”，因为线性数据结构中只需要通过索引即可以访问到属性， <ul><li>虽然访问线性结构的速度快，但是如果从线性结构中添加或者删除大量的属性时，则执行效率会非常低，这主要因为会产生大量时间和内存开销。</li></ul></li><li>因此，如果一个对象的属性过多时，V8 就会采取另外一种存储策略，那就是“慢属性”策略， <ul><li>但慢属性的对象内部会有独立的非线性数据结构 (词典) 作为属性存储容器。所有的属性元信息不再是线性存储的，而是直接保存在属性字典中。 <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-4.png" alt="慢属性是如何存储的"></li></ul></li></ul><h2 id="在-chrome-中查看对象布局" tabindex="-1">在 Chrome 中查看对象布局 <a class="header-anchor" href="#在-chrome-中查看对象布局" aria-label="Permalink to &quot;在 Chrome 中查看对象布局&quot;">​</a></h2><blockquote><p>来我们来结合 Chrome 中的内存快照，来看看对象在内存中是如何布局的？可以打开 Chrome 开发者工具，先选择控制台标签，然后在控制台中执行以下代码查看内存快照：</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">property_num</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">element_num</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//添加可索引属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> element_num; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`element\${</span><span style="color:#E1E4E8;">i</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//添加常规属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> property_num; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ppt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`property\${</span><span style="color:#E1E4E8;">i</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">[ppt] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ppt</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">property_num</span><span style="color:#24292E;">,</span><span style="color:#E36209;">element_num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//添加可索引属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> element_num; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`element\${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//添加常规属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> property_num; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ppt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`property\${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">[ppt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ppt</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>上面我们创建了一个构造函数，可以利用该构造函数创建了新的对象，我给该构造函数设置了两个参数 property_num、element_num， <ul><li>分别代表创建常规属性的个数和排序属性的个数，</li><li>我们先将这两种类型的个数都设置为 10 个，然后利用该构造函数创建了一个新的 bar 对象。</li></ul></li><li>创建了函数对象，接下来我们就来看看构造函数和对象在内存中的状态。</li><li>可以将 Chrome 开发者工具切换到 Memory 标签，然后点击左侧的小圆圈就可以捕获当前的内存快照，最终截图如下所示： <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-5.png" alt="V8内存快照截图"></li><li>上图就是收集了当前内存快照的界面，要想查找我们刚才创建的对象，你可以在搜索框里面输入构造函数 Foo，Chrome 会列出所有经过构造函数 Foo 创建的对象，如下图所示： <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-6.png" alt="从内存快照搜索构造函数"></li><li>观察上图，我们搜索出来了所有经过构造函数 Foo 创建的对象，</li><li>点开 Foo 的那个下拉列表，第一个就是刚才创建的 bar 对象，我们可以看到 bar 对象有一个 elements 属性， <ul><li>这里面就包含我们创造的所有的排序属性，</li></ul></li><li>那么怎么没有常规属性对象呢？ <ul><li>这是因为只创建了 10 个常规属性，</li><li>所以 V8 将这些常规属性直接做成了 bar 对象的对象内属性。</li><li>所以这时候的数据内存布局是这样的： <ul><li>10 个常规属性作为对象内属性，存放在 bar 函数内部；</li><li>10 个排序属性存放在 elements 中。</li></ul></li></ul></li><li>接下来我们可以将创建的对象属性的个数调整到 20 个，你可以在控制台执行下面这段代码：</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bar2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bar2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后我们再重新生成内存快照，再来看看生成的图片： <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-7.png" alt="利用构造函数生成的对象"></p><ul><li>我们可以看到，构造函数 Foo 下面已经有了两个对象了，其中一个 bar，另外一个是 bar2，我们点开第一个 bar2 对象，内容如下所示： <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-8.png" alt="查看对象属性"></li><li>由于创建的常用属性超过了 10 个，所以另外 10 个常用属性就被保存到 properties 中了， <ul><li>注意因为 properties 中只有 10 个属性，所以依然是线性的数据结构，</li><li>我们可以看其都是按照创建时的顺序来排列的。</li><li>所以这时候属性的内存布局是这样的： <ul><li>10 属性直接存放在 bar2 的对象内 ;</li><li>10 个常规属性以线性数据结构的方式存放在 properties 属性里面 ;</li><li>10 个数字属性存放在 elements 属性里面。</li><li>如果常用属性太多了，比如创建了 100 个，那么我们再来看看其内存分布，你可以执行下面这段代码：</li></ul></li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bar3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bar3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后以同样的方式打开 bar3，查看其内存布局，最终如下图所示： <img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-9.png" alt="查看对象属性"></p><ul><li>结合上图，我们可以看到，这时候的 properties 属性里面的数据并不是线性存储的，而是以非线性的字典形式存储的，</li><li>所以这时候属性的内存布局是这样的： <ul><li>10 属性直接存放在 bar3 的对象内 ;</li><li>90 个常规属性以非线性字典的这种数据结构方式存放在 properties 属性里面 ;</li><li>10 个数字属性存放在 elements 属性里面。</li></ul></li></ul><h2 id="其他属性" tabindex="-1">其他属性 <a class="header-anchor" href="#其他属性" aria-label="Permalink to &quot;其他属性&quot;">​</a></h2><p><img src="https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-10.png" alt="其他属性"></p><ul><li>观察上图，除了 elements 和 properties 属性，V8 还为每个对象实现了 map 属性和 <code>__proto__</code> 属性。</li><li><code>__proto__</code> 属性就是原型，是用来实现 JavaScript 继承的，而 map 则是隐藏类</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>本文我们的主要目标是介绍 V8 内部是如何存储对象的</li><li>因为 JavaScript 中的对象是由一组组属性和值组成的，所以最简单的方式是使用一个字典来保存属性和值，</li><li>但是由于字典是非线性结构，所以如果使用字典，读取效率会大大降低。</li><li>为了提升查找效率，V8 在对象中添加了两个隐藏属性，排序属性和常规属性， <ul><li>element 属性指向了 elements 对象，在 elements 对象中，会按照顺序存放排序属性。</li><li>properties 属性则指向了 properties 对象，在 properties 对象中，会按照创建时的顺序保存常规属性。</li></ul></li><li>通过引入这两个属性，加速了 V8 查找属性的速度</li><li>为了更加进一步提升查找效率，V8 还实现了内置内属性的策略，</li><li>当常规属性少于一定数量时，V8 就会将这些常规属性直接写进对象中，这样又节省了一个中间步骤。</li><li>但是如果对象中的属性过多时，或者存在反复添加或者删除属性的操作，那么 V8 就会将线性的存储模式降级为非线性的字典存储模式</li><li>这样虽然降低了查找速度，但是却提升了修改对象的属性的速度</li></ul><h2 id="不建议使用-delete-来删除属性的原因" tabindex="-1">不建议使用 delete 来删除属性的原因 <a class="header-anchor" href="#不建议使用-delete-来删除属性的原因" aria-label="Permalink to &quot;不建议使用 delete 来删除属性的原因&quot;">​</a></h2><blockquote><p>结合快属性和慢属性</p></blockquote><ul><li>如果删除属性在线性结构中，删除后需要移动元素，开销较大，而且可能需要将慢属性重排到快属性。</li><li>如果删除属性在properties对象中，查找开销较大。</li></ul><h2 id="v8对象属性访问速度优化思维导图" tabindex="-1">v8对象属性访问速度优化思维导图 <a class="header-anchor" href="#v8对象属性访问速度优化思维导图" aria-label="Permalink to &quot;v8对象属性访问速度优化思维导图&quot;">​</a></h2>`,31);function c(y,i,E,F,u,b){const s=a("img-viewer");return l(),p("div",null,[r,o(s,{src:"https://zmx2321.github.io/vite-blog/images/note/front/v8-note/4/4-0.png",alt:"v8对象属性访问速度优化"},null,8,["src"])])}const d=n(t,[["render",c]]);export{m as __pageData,d as default};
