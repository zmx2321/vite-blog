import{_ as l,o as i,c as a,e}from"./app.c9c6cc3c.js";const m=JSON.parse('{"title":"编程语言","description":"","frontmatter":{},"headers":[],"relativePath":"pages/note/other/computer-note/computer-note-2.md","filePath":"pages/note/other/computer-note/computer-note-2.md","lastUpdated":1741077154000}'),t={name:"pages/note/other/computer-note/computer-note-2.md"},o=e('<h1 id="编程语言" tabindex="-1">编程语言 <a class="header-anchor" href="#编程语言" aria-label="Permalink to &quot;编程语言&quot;">​</a></h1><h2 id="编程语言分类" tabindex="-1">编程语言分类 <a class="header-anchor" href="#编程语言分类" aria-label="Permalink to &quot;编程语言分类&quot;">​</a></h2><ul><li>低级语言 <ul><li>汇编语言、机器语言</li><li>cpu运行机器指令，直接操作硬件</li></ul></li><li>高级语言 <ul><li>java、python、javascript、c、c++、c#</li></ul></li></ul><h2 id="高级语言" tabindex="-1">高级语言 <a class="header-anchor" href="#高级语言" aria-label="Permalink to &quot;高级语言&quot;">​</a></h2><blockquote><p>高级语言之母是c语言 高级语言的核心就是语句封装了指令</p></blockquote><ul><li>1972年，贝尔实验室的Dennis Ritchie发明了C语言</li><li>在汇编之后，高级语言的出现，使得程序员不再需要直接操作硬件，而是通过高级语言编写程序，然后编译器将高级语言编译成汇编语言，最后汇编语言再编译成机器语言，然后由计算机执行</li><li>c可以全面调用计算机的功能接口</li></ul><h2 id="编译器和解释器" tabindex="-1">编译器和解释器 <a class="header-anchor" href="#编译器和解释器" aria-label="Permalink to &quot;编译器和解释器&quot;">​</a></h2><ul><li>编译器 <ul><li>将高级语言编译成汇编语言</li><li>将汇编语言编译成机器语言</li><li>编译器是一种程序，它能够将高级语言编写的程序转换为计算机可以理解的机器语言</li><li>编译器的工作原理是将源代码一次性编译成机器语言，然后执行</li><li>编译器的优点是执行速度快，因为它不需要解释，直接执行机器语言</li><li>编译器的缺点是不能在不同的操作系统上运行，因为它需要编译成特定的机器语言</li><li>代表语言：C、C++、Go</li></ul></li><li>解释器 <ul><li>解释器是一种程序，它能够将高级语言编写的程序转换为计算机可以理解的机器语言</li><li>解释器的工作原理是将源代码逐行解释成机器语言，然后执行</li><li>解释器的优点是可以在任何操作系统上运行，因为它不需要编译成特定的机器语言</li><li>解释器的缺点是执行速度慢，因为它需要解释</li><li>代表语言：Python、JavaScript、PHP、Ruby</li></ul></li></ul><h2 id="编译型语言和解释型语言" tabindex="-1">编译型语言和解释型语言 <a class="header-anchor" href="#编译型语言和解释型语言" aria-label="Permalink to &quot;编译型语言和解释型语言&quot;">​</a></h2><ul><li>编译型语言 <ul><li>编译型语言的程序在执行之前，需要一个专门的编译过程，将程序编译成机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了</li><li>代表语言：C、C++、Go</li><li>编译器将程序翻译成可执行语言(机器语言) =&gt; 先翻译后执行</li><li>可以直接交给cpu去执行</li><li>一次编译，多次运行</li><li>编译完之后,可以直接执行</li></ul></li><li>解释型语言 <ul><li>解释型语言的程序不需要编译，在运行时，解释器对程序逐行进行解释和执行 <ul><li>一边翻译一边执行</li><li>逐行执行,交给c,然后交给cpu去执行</li></ul></li><li>代表语言：Python、JavaScript、PHP、Ruby</li><li>无论什么时候执行，都需要解释器进行翻译</li></ul></li></ul><h2 id="编译型语言和解释型语言的区别" tabindex="-1">编译型语言和解释型语言的区别 <a class="header-anchor" href="#编译型语言和解释型语言的区别" aria-label="Permalink to &quot;编译型语言和解释型语言的区别&quot;">​</a></h2><ul><li>编译型语言 <ul><li>优点：执行速度快</li><li>缺点：开发效率低</li><li>换到其他环境上运行需要重新编译</li><li>编译型语言对代码的静态类型检查较为严格</li></ul></li><li>解释型语言 <ul><li>优点：开发效率高</li><li>缺点：执行速度慢</li><li>换到其他环境上运行不需要重新编译</li><li>只要有解释器,就可以运行</li><li>跨平台方便</li><li>具有动态类型检查的灵活性,变量在运行时确定类型</li></ul></li></ul><h2 id="python" tabindex="-1">python <a class="header-anchor" href="#python" aria-label="Permalink to &quot;python&quot;">​</a></h2><ul><li>胶水语言 <ul><li>胶水语言是一种编程语言，它可以将其他编程语言编写的程序连接起来，形成一个整体</li></ul></li></ul><h2 id="终端环境" tabindex="-1">终端环境 <a class="header-anchor" href="#终端环境" aria-label="Permalink to &quot;终端环境&quot;">​</a></h2><ul><li>终端环境是一种编程环境，它允许用户通过命令行界面与计算机进行交互</li><li>终端环境是一种命令行界面，它允许用户输入命令，然后计算机执行命令</li><li>终端环境是一种编程环境，它允许用户编写程序，然后计算机执行程序</li></ul>',16),r=[o];function u(n,c,h,s,d,p){return i(),a("div",null,r)}const b=l(t,[["render",u]]);export{m as __pageData,b as default};
//# sourceMappingURL=pages_note_other_computer-note_computer-note-2.md.535ac119.js.map
