import{_ as e,o as a,c as r,e as o}from"./app.2ecb963c.js";const f=JSON.parse('{"title":"chrome浏览器performance调试工具","description":"","frontmatter":{},"headers":[],"relativePath":"pages/note/other/chrome-note-0.md","filePath":"pages/note/other/chrome-note-0.md","lastUpdated":1740965359000}'),l={name:"pages/note/other/chrome-note-0.md"},i=o('<h1 id="chrome浏览器performance调试工具" tabindex="-1">chrome浏览器performance调试工具 <a class="header-anchor" href="#chrome浏览器performance调试工具" aria-label="Permalink to &quot;chrome浏览器performance调试工具&quot;">​</a></h1><h2 id="performance面板" tabindex="-1">performance面板 <a class="header-anchor" href="#performance面板" aria-label="Permalink to &quot;performance面板&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>使用 Performance 面板主要对网站应用的运行时性能表现进行检测与分析，其可检测的内容不仅包括页面的每秒帧数(FPS)、CPU 的消耗情况和各种请求的时间花费，还能查看页面在前 1ms 与后 1ms 之间网络任务的执行情况等内容。</p><h3 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h3><ul><li>在进行性能检测的网站页面中打开 Chrome 开发者工具的Performance 面板，这里建议在Chrome 浏览器的匿名模式下使用该工具，因为在匿名模式下不会受到既有缓存或其他插件程序等因素的影响，能够给性能检测提供一个相对干净的运行环境。</li><li>可以使用一个示例网站来进行观测性能检测的效果(该网站是google chrome开发人员做的一个示例) <ul><li><a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noreferrer">https://googlechrome.github.io/devtools-samples/jank/</a></li></ul></li></ul><h3 id="performance面板按钮" tabindex="-1">performance面板按钮 <a class="header-anchor" href="#performance面板按钮" aria-label="Permalink to &quot;performance面板按钮&quot;">​</a></h3><ul><li>record: 开始记录性能数据</li><li>clear: 清除性能数据</li><li>reload: 重新加载页面</li><li>pause: 暂停记录性能数据</li><li>网页指标: 页面的性能指标(fcp)</li><li>右上角有个小齿轮,可以进行设置 <ul><li>主要设置每次性能分析相关的设置</li><li>比如每次性能分析的时间,每次性能分析的采样率,每次性能分析的持续时间等</li></ul></li></ul><h3 id="录制性能数据面板" tabindex="-1">录制性能数据面板 <a class="header-anchor" href="#录制性能数据面板" aria-label="Permalink to &quot;录制性能数据面板&quot;">​</a></h3><ul><li>最上面一条表示fbs(刷新率),即每秒帧数</li><li>中间的表示cpu的使用情况</li><li>下面的表示网络的使用情况</li><li>最下面的表示页面的渲染情况 <ul><li>可以看到页面的渲染情况,比如页面的重绘,重排,合成等</li><li>可以看到页面的js执行情况,比如js的执行时间,js的执行次数等</li><li>可以看到页面的网络请求情况,比如网络请求的时间,网络请求的次数等</li></ul></li></ul><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li>performance工具是w3c性能小组新引入的api,目前ie9以上的浏览器都支持</li><li>performance工具是一个js的api,可以通过window.performance来访问 <ul><li>在控制台输入performance,可以看到performance对象的属性和方法</li><li>eventCounts: 事件计数 =&gt; 从网站开始到现在,每个事件发生了多少次</li></ul></li></ul><h2 id="chrome是怎么进行工作的" tabindex="-1">chrome是怎么进行工作的 <a class="header-anchor" href="#chrome是怎么进行工作的" aria-label="Permalink to &quot;chrome是怎么进行工作的&quot;">​</a></h2><h2 id="js的事件循环机制" tabindex="-1">js的事件循环机制 <a class="header-anchor" href="#js的事件循环机制" aria-label="Permalink to &quot;js的事件循环机制&quot;">​</a></h2><h3 id="了解chrome-performance工具为什么要先了解js的事件循环机制" tabindex="-1">了解chrome performance工具为什么要先了解js的事件循环机制 <a class="header-anchor" href="#了解chrome-performance工具为什么要先了解js的事件循环机制" aria-label="Permalink to &quot;了解chrome performance工具为什么要先了解js的事件循环机制&quot;">​</a></h3><ul><li>chrome浏览器是js的解释器,js程序执行的核心就是事件循环</li></ul><h2 id="浏览器的进程模型" tabindex="-1">浏览器的进程模型 <a class="header-anchor" href="#浏览器的进程模型" aria-label="Permalink to &quot;浏览器的进程模型&quot;">​</a></h2><blockquote><p>chrome浏览器是js的解释器,只有理解了js的事件循环机制理解chrome浏览器的performance工具的使用原理 而只有理解了浏览器的进程模型,才能理解事件循环发生在哪个位置,然后才能理解事件循环</p></blockquote>',18),t=[i];function c(h,n,s,m,d,u){return a(),r("div",null,t)}const b=e(l,[["render",c]]);export{f as __pageData,b as default};
//# sourceMappingURL=pages_note_other_chrome-note-0.md.6659abec.js.map
