import{_ as l,o as s,c as a,e as n}from"./app.eee70fb9.js";const h=JSON.parse('{"title":"原理-事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/advanced/interview-advanced-1.md","filePath":"pages/interview/advanced/interview-advanced-1.md","lastUpdated":1741188543000}'),o={name:"pages/interview/advanced/interview-advanced-1.md"},e=n(`<h1 id="原理-事件循环" tabindex="-1">原理-事件循环 <a class="header-anchor" href="#原理-事件循环" aria-label="Permalink to &quot;原理-事件循环&quot;">​</a></h1><h2 id="浏览器的进程模型" tabindex="-1">浏览器的进程模型 <a class="header-anchor" href="#浏览器的进程模型" aria-label="Permalink to &quot;浏览器的进程模型&quot;">​</a></h2><blockquote><p>知道了线程和进程,才能理解浏览器的进程模型,理解了浏览器的进程模型,才能理解事件循环发生在哪个位置,然后才能理解事件循环</p></blockquote><h3 id="什么是进程" tabindex="-1">什么是进程 <a class="header-anchor" href="#什么是进程" aria-label="Permalink to &quot;什么是进程&quot;">​</a></h3><ul><li>程序运行需要他自己的专属内存空间,可以把这块内存空间简单理解为进程 <ul><li>内存空间,即进程,可以简单理解为房屋</li><li>进程之所以这么设计,它的目的,就是为了隔离,即进程之间是相互隔离的 <ul><li>假如微信崩了,只是微信的专属内存空间被释放掉了,其他程序并没有受到影响</li></ul></li></ul></li><li>每个应用至少有一个进程,进程之间相互独立,即使要通信,也需要双方同意</li></ul><h3 id="什么是线程" tabindex="-1">什么是线程 <a class="header-anchor" href="#什么是线程" aria-label="Permalink to &quot;什么是线程&quot;">​</a></h3><ul><li>有了进程之后,就有了内存空间了,就可以运行程序代码了,但是谁来运行代码 ? <ul><li>运行代码的「人」我们就把它叫做线程</li><li>所以一个进程至少有一个线程(即至少有一个人去跑代码)(不然分配了内存空间不干活,这个空间就没用了)</li></ul></li><li>进程在开启后会自动创建一个线程来运行代码,我们称这个线程是主线程 <ul><li>如果程序需要同时执行多块代码,主线程就会启动更多的线程来执行代码,所以一个进程中可以包含多个线程</li><li>主线程结束了,整个程序也结束了</li></ul></li><li>举个例子(运行一款游戏) <ul><li>先分配一块内存空间,就是进程,里面有很多个「人」要干事情 <ul><li>他们共享一块内存空间(都是一家人,家里的东西可以随便拿随便用)</li></ul></li><li>主线程(干登陆注册等事情)</li><li>游戏线程(游戏的逻辑)</li><li>音效线程(游戏的音效)</li><li>网络线程(游戏的网络通信)</li><li>......</li></ul></li></ul><h3 id="浏览器有哪些进程和线程" tabindex="-1">浏览器有哪些进程和线程 <a class="header-anchor" href="#浏览器有哪些进程和线程" aria-label="Permalink to &quot;浏览器有哪些进程和线程&quot;">​</a></h3><blockquote><p>浏览器的进程模型</p></blockquote><ul><li>浏览器是一款多进程多线程的应用程序 <ul><li>浏览器的内部工作极其复杂,复杂程度已经堪比一个操作系统了</li></ul></li><li>如何看浏览器的进程(任务管理器) <ul><li>右上角 =&gt; 更多工具 =&gt; 任务管理器</li></ul></li><li>当浏览器启动之后,它会自动启动多个进程,主要有以下几种(每个进程都有独立的内存空间) <ul><li>浏览器进程 <ul><li>界面展示: 浏览器皮肤,头部,底部,书签栏,地址栏,前进后退,刷新等</li><li>用户交互: 鼠标滚动了滚动条,按了键盘,点击了按钮等</li><li>子进程管理: 负责启动其他进程,比如渲染进程,插件进程等 <ul><li>浏览器刚启动的时候只有一个浏览器进程,这是主进程,其他所有的进程都是由主进程即浏览器进程启动的</li><li>每打开一个标签页,浏览器进程就会启动一个渲染进程,一个网络进程,一个GPU进程等</li></ul></li><li>浏览器进程内部会启用多个线程处理不同的任务</li></ul></li><li>网络进程 <ul><li>负责加载网络资源,比如http请求等. 网络进程内部会启动多个线程处理不同的网络任务</li></ul></li><li>渲染进程(我们需要了解的重点) <ul><li>浏览器启动之后,会自动打开一个标签页,这个标签页就是一个渲染进程,即一个标签页一个渲染进程</li><li>因为每开一个页面就相当于开了一个进程,所以谷歌浏览器特别吃内存,开多了就卡了</li><li>目前谷歌浏览器还是这种模式,但将来可能会有变动</li><li>按照官方说明,为了减少进程的数量,谷歌浏览器可能会采用「站点隔离」的模式,即一个站点一个渲染进程</li></ul></li></ul></li><li>补充说明 <ul><li>浏览器开启之后,除了以上那些进程还有很多,比如GPU进程,v8代理进程等</li><li>浏览器每打开一个Tab页面就会开启一个新的进程,每个进程都是相互独立的,每个进程内都有自己一套完整的JavaScript引擎,DOM,BOM等</li></ul></li></ul><h4 id="渲染进程-我们需要了解的重点" tabindex="-1">渲染进程(我们需要了解的重点) <a class="header-anchor" href="#渲染进程-我们需要了解的重点" aria-label="Permalink to &quot;渲染进程(我们需要了解的重点)&quot;">​</a></h4><ul><li>渲染进程启动后,会开启一个渲染主线程 <ul><li>渲染主线程负责执行HTML、JS、CSS代码</li><li>默认情况下,浏览器会为每一个标签页开启一个新的渲染进程,以保证不同的标签页之间互不影响</li><li>渲染主线程是浏览器中最繁忙的线程,它会执行HTML解析、CSS解析、JavaScript执行、布局(宽高位置)、绘制等任务 <ul><li>计算样式(换算成px,样式冲突等)</li><li>执行事件处理函数、定时器回调函数、网络请求回调函数等</li><li>每秒把页面画60次,即每16.7ms画一次(fps: 60帧每秒)</li><li>......</li><li>为什么渲染进程不适用多个线程来处理这些事情,(为什么只能让渲染主线程来处理)?</li></ul></li><li>因为渲染主线程非常繁忙,所以如果渲染主线程被阻塞了,那么页面就会卡顿</li></ul></li></ul><h4 id="渲染主线程" tabindex="-1">渲染主线程 <a class="header-anchor" href="#渲染主线程" aria-label="Permalink to &quot;渲染主线程&quot;">​</a></h4><blockquote><p>要处理那么多的任务,主线程遇到了一个前所未有的难题,如何调度任务,才能保证页面流畅运行 渲染主线程使用了一个绝妙的主意来处理这个问题: 排队</p></blockquote><ul><li>渲染主线程会按照顺序执行任务,每个任务都有一个优先级,优先级高的任务会优先执行 <ul><li>其他任务会进入队列,等待主线程空闲的时候再执行,这个队列就叫做消息队列</li><li>这个队列中的任务,也可能是其他线程派发的(比如用户的交互[我们在前文了解到,用户的交互是由浏览器进程派发的],定时器回调函数,网络请求回调函数等) <ul><li>其他进程,包括浏览器进程,是不能执行js代码的,只能派发任务给渲染进程的渲染主线程中的消息队列中让其排队执行</li></ul></li><li>这个任务队列,就是浏览器的事件循环机制的核心</li></ul></li><li>事件循环(也叫消息循环) <ul><li>最开始的时候,渲染主线程会进入一个无线循环 =&gt; <code>for(;;)</code></li><li>每一次循环会检查消息队列中是否有任务存在,如果有,就取出第一个任务,执行碗一个后进入下一次循环,如果没有,则进入休眠状态</li><li>其他所有线程(包括其他进程的线程)可以随时向消息队列中添加任务,新任务会驾到消息队列的末尾,在添加新任务时,如果主线程是休眠状态,则会将其唤醒以继续循环拿取任务</li></ul></li><li>补充说明 <ul><li>在<a href="https://github.com/chromium/chromium" target="_blank" rel="noreferrer">浏览器源码(c++写的)</a>里面,这个消息队列的文件夹名字,叫做message_loop(消息循环)</li><li>在w3c里面叫做 event loop(事件循环)</li><li>在谷歌浏览器里面叫做 message loop(消息循环)</li></ul></li></ul><h2 id="事件循环的一些解释性说明" tabindex="-1">事件循环的一些解释性说明 <a class="header-anchor" href="#事件循环的一些解释性说明" aria-label="Permalink to &quot;事件循环的一些解释性说明&quot;">​</a></h2><h3 id="什么是异步" tabindex="-1">什么是异步 <a class="header-anchor" href="#什么是异步" aria-label="Permalink to &quot;什么是异步&quot;">​</a></h3><ul><li>在代码执行中,会遇到一些无法立即处理的任务 <ul><li>setTimeout、setInterval、XHR、Fetch、Promise、addEventListener等</li><li>如果让渲染主线程需要依次等他们执行完再去做其他的事情,那么页面就会卡顿,用户体验就会非常差</li></ul></li><li>举个例子 <ul><li>如果遇到了setTimeout,渲染主线程会将setTimeout的任务派发到其他线程(对渲染主线程来说,这个任务就结束了),然后继续执行后续的任务 <ul><li>这个线程就是计时线程(渲染主线程没有计时的功能)</li><li>计时器线程会等待指定的时间,到时间之后,向消息队列中添加一个任务(渲染主线程依次执行任务,执行到它时,就会执行这个任务)</li><li>计时器原理比事件循环原理复杂非常多,我们这里只是假定类似一个人在掐着表计时,但实际上里面是操作系统方面的东西,这里不展开讲</li><li>这里使用的就是异步,渲染主线程直接把setTimeout的任务派发到其他线程,然后继续执行后续的任务,计时线程掐表到时间之后把这个任务塞到任务队列中</li></ul></li></ul></li><li>渲染主线程承担着极其重要的工作,无论如何不能阻塞 <ul><li>使用异步之后,渲染主线程永不阻塞</li></ul></li><li>面试题: 如何理解js的异步 <ul><li>js是一门单线程的语言(🌟),这是因为它始终运行在浏览器的渲染主线程中的(🌟),而渲染主线程只有一个,但渲染主线程承担着诸多的工作,如渲染页面,执行js,处理用户交互等(🌟),如果使用同步的方式,就极有可能导致主线程产生阻塞,从而导致消息队列中的很多其他任务无法执行,这样一来,一方面会导致主线程白白消耗时间,另一方面导致页面无法及时更新,给用户产生卡死的现象</li><li>所以浏览器采用异步的方式来避免,具体的做法是,当某些任务发生时,如计时器,网络,事件监听等,主线程将任务交给其他线程去处理,自身立即结束任务的执行(🌟),转而执行后续代码,当其他线程完成时,将事先传递的回调函数包装成任务(🌟),加入到消息队列的末尾排队(🌟),等待主线程调度执行(🌟)</li><li>在这种异步模式下,渲染主线程,即渲染主进程,即渲染进程,也即浏览器,永不阻塞,从而最大程度保证了单线程的流畅运行</li><li>js是单线程的原因不是浏览器是单线程的(浏览器是多进程多线程的),是因为只有浏览器的渲染进程中的渲染主线程可以执行js代码,即js是执行在渲染主线程上的</li></ul></li><li>补充说明 <ul><li>在浏览器源码中,所有的任务实际上是一个结构体(可以理解成一个对象),任务队列中可以把任务放进去,但不能把一个回调函数放进去</li></ul></li></ul><h3 id="js为何会阻碍渲染" tabindex="-1">JS为何会阻碍渲染 <a class="header-anchor" href="#js为何会阻碍渲染" aria-label="Permalink to &quot;JS为何会阻碍渲染&quot;">​</a></h3><blockquote><p>因为js的执行和页面的渲染,都在渲染主线程中进行的</p></blockquote><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;test! &lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;change&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> h1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document. </span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;"> ( </span><span style="color:#9ECBFF;">&#39;h1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> btn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document. </span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 死循环指定的时间</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">duration</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> duration) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      btn.</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (){</span></span>
<span class="line"><span style="color:#E1E4E8;">        h1.textContent </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test0000!&#39;</span><span style="color:#E1E4E8;">；</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;test! &lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;change&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> h1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document. </span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;"> ( </span><span style="color:#032F62;">&#39;h1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> btn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document. </span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;button&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 死循环指定的时间</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">(</span><span style="color:#E36209;">duration</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> duration) {}</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      btn.</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (){</span></span>
<span class="line"><span style="color:#24292E;">        h1.textContent </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test0000!&#39;</span><span style="color:#24292E;">；</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li>一开始执行全局js,任务队列是空的,没有任务在排队</li><li>当渲染主线程执行到<code>btn.onclick</code>的时候,会把这个任务派发给交互线程,就不管了,继续执行下面的任务 <ul><li>告诉交互线程,当按钮被点击的时候,要把这个回调函数包装成任务,放到任务队列的末尾</li></ul></li><li>当用户点击了按钮</li><li>函数被放到了消息队列(其实是一个任务对象)</li><li>渲染主线程开始执行任务</li><li>首先修改dom的文本内容,在js中设置了,但没在页面中体现 <ul><li>在修改了dom文本之后,需要在页面绘制,于是这个任务派发了一个绘制任务到消息队列</li></ul></li><li>到下一步执行死循环</li><li>死循环结束,开始执行下一个任务,即绘制页面 <ul><li>文本其实早就改了,但需要死循环结束之后才能绘制页面</li><li>所以js的执行,会影响页面渲染</li></ul></li><li>补充说明 <ul><li>react使用了fiber机制,来减少js运行对页面渲染的影响,因为react的fiber机制,会把渲染任务拆分成多个小任务,让渲染任务和js任务交替执行,从而减少js对页面渲染的影响</li></ul></li></ul><h3 id="任务有优先级吗" tabindex="-1">任务有优先级吗 <a class="header-anchor" href="#任务有优先级吗" aria-label="Permalink to &quot;任务有优先级吗&quot;">​</a></h3><blockquote><p>任务没有优先级,先进先出 但是消息队列有优先级</p></blockquote><ul><li>w3c的最新解释 <ul><li>随着浏览器的复杂度急剧提升,w3c不再用宏队列的说法,而是用任务队列的说法</li><li>每个任务都有一个任务类型,同一个类型的任务必须在一个队列,不同类型的任务可以分属于不同的队列.</li><li>在一次事件循环中,浏览器可以根据实际情况从不同的队列中取出任务执行 <ul><li>各个浏览器的实现可能不一样,但大致逻辑应该是这样的</li></ul></li><li>浏览器必须准备好一个微队列,微队列中的任务优先所有其他任务执行 <ul><li>连绘制页面都会被阻塞</li></ul></li></ul></li><li>在目前chrome浏览器中,有4个任务队列 <ul><li>微队列: 用户存放需要最快执行的任务,优先级 =&gt; 最高 (promie、mutationObserver) <ul><li>w3c明确规定</li><li><code>Promise.resolve().then(函数)</code> =&gt; 立即把一个函数添加到微队列</li></ul></li><li>交互队列: 用于存放用户操作后产生的事件处理任务,优先级 =&gt; 高</li><li>延时队列: 用于存放计时器到达后的回调任务,优先级 =&gt; 中 <ul><li>在源码中,计时器任务就分了三种</li></ul></li><li>异步队列: 用于存放I/O、网络请求等异步任务,优先级 =&gt; 低</li></ul></li></ul><h3 id="事件循环面试题" tabindex="-1">事件循环面试题 <a class="header-anchor" href="#事件循环面试题" aria-label="Permalink to &quot;事件循环面试题&quot;">​</a></h3><h4 id="阐述一下js的事件循环" tabindex="-1">阐述一下js的事件循环 <a class="header-anchor" href="#阐述一下js的事件循环" aria-label="Permalink to &quot;阐述一下js的事件循环&quot;">​</a></h4><ul><li>事件循环又叫消息循环,是 浏览器渲染主线程的工作方式</li><li>在chrome的源码中,它开启了一个不会结束的for循环(<code>for(;;)</code>),每次循环从消息队列中取出第一个任务执行,而其他线程只需要在合适的时候将任务加到队列末尾即可</li><li>过去把消息队列简单分为宏队列和微队列,这种说法目前已无法满足复杂的浏览器环境,取而代之的是一种更加灵活多变的处理方式</li><li>根据w3c的官方解释,每个任务有不同的类型,同类型的任务必须在同一个队列,不同的任务可以属于不同的队列,不同队列有不同的优先级,在一次循环中,由浏览器自行决定取哪一个队列的任务执行,但浏览器必须有一个微队列,微队列的任务一定具有最高的优先级,必须优先调度执行</li></ul><h4 id="js中的计时器能做到精确计时吗-为什么" tabindex="-1">JS中的计时器能做到精确计时吗,为什么 <a class="header-anchor" href="#js中的计时器能做到精确计时吗-为什么" aria-label="Permalink to &quot;JS中的计时器能做到精确计时吗,为什么&quot;">​</a></h4><ul><li>不行</li><li>原因: <ul><li>计算机硬件没有原子钟,无法做到精确计时 <ul><li>计算器中没有原子钟,原子钟是用cpu寄存器做的</li></ul></li><li>操作系统的计时函数本身就有少量偏差,由于js的计时器最终调用的是操作系统的计时函数,所以也就无法做到精确计时 <ul><li>mac和windows就不一样</li></ul></li><li>按照w3c的规定,浏览器实现计时器时,如果嵌套超过5层,则会有4ms的最少时间(第五层嵌套的时间,不能是0),即计时器的最小时间粒度是4ms,小于4ms的计时是不准确的 <ul><li><img src="https://zmx2321.github.io/vite-blog/images/interview/advanced/chrome_time_code.png" alt="chrome_time_code"></li></ul></li><li>受事件循环影响,计时器的回调函数只能在主线程空闲时运行,也带来了偏差 <ul><li>除了微任务,浏览器认为,用户交互的任务也比计时任务重要</li></ul></li></ul></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>单线程是异步产生的原因(🌟) <ul><li>单线程不使用异步就会阻塞(不需要等计时器、网络等执行完,就可以继续执行后续代码)</li></ul></li><li>事件循环是异步的实现方式(🌟)</li></ul>`,32),p=[e];function i(t,r,c,E,u,y){return s(),a("div",null,p)}const b=l(o,[["render",i]]);export{h as __pageData,b as default};
//# sourceMappingURL=pages_interview_advanced_interview-advanced-1.md.d235d569.js.map
