import{_ as s,o as a,c as o,e as l}from"./app.8f3a4d4c.js";const g=JSON.parse('{"title":"JS-Web-API-存储","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/foundation/interview-foundation-13.md","filePath":"pages/interview/foundation/interview-foundation-13.md","lastUpdated":1699250630000}'),n={name:"pages/interview/foundation/interview-foundation-13.md"},e=l(`<h1 id="js-web-api-存储" tabindex="-1">JS-Web-API-存储 <a class="header-anchor" href="#js-web-api-存储" aria-label="Permalink to &quot;JS-Web-API-存储&quot;">​</a></h1><p><a href="https://zmx2321.github.io/blog_code/interview/interview-one-side/13.html" target="_blank" rel="noreferrer">代码笔记</a></p><h2 id="_1-题目" tabindex="-1">1. 题目 <a class="header-anchor" href="#_1-题目" aria-label="Permalink to &quot;1. 题目&quot;">​</a></h2><ul><li>描述cookie、localStorage、sessionStorage区别 <ul><li>cookie应该算是http请求的一部分，但他具备这种能力</li></ul></li></ul><h2 id="_2-知识点" tabindex="-1">2. 知识点 <a class="header-anchor" href="#_2-知识点" aria-label="Permalink to &quot;2. 知识点&quot;">​</a></h2><h3 id="_2-1-cookie" tabindex="-1">2.1. cookie <a class="header-anchor" href="#_2-1-cookie" aria-label="Permalink to &quot;2.1. cookie&quot;">​</a></h3><ul><li>简述 <ul><li>cookie本身用于浏览器和server通讯</li><li>最初的的时候是被&quot;借用&quot;到本地存储来 <ul><li>因为html5之前还没有localStorage和sessionStorage(2010)</li></ul></li><li>可用<code>document.cookie=&quot;...&quot;来修改</code><ul><li>浏览器中在application中可以看到cookie，本地存储</li><li>以分号拆分出来，以键值对的展现方式，一行行展现</li></ul></li><li>后端也可以修改cookie <ul><li>浏览器中在network中可以看到请求头里面也有cookie</li><li>即浏览器(本地)和服务端通讯</li><li>可以每次请求都会把cookie带上</li><li>字符串的形式，以分号分割</li></ul></li></ul></li><li>代码示例<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// cookie以分号分割，以键值对的形式存储</span></span>
<span class="line"><span style="color:#6A737D;">// cookie只能赋值一个</span></span>
<span class="line"><span style="color:#E1E4E8;">document.cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a=100;b=200&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置cookie</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cookie&quot;</span><span style="color:#E1E4E8;">, document.cookie)  </span><span style="color:#6A737D;">// 获取cookie a=100</span></span>
<span class="line"><span style="color:#E1E4E8;">document.cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;b=200&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cookie&quot;</span><span style="color:#E1E4E8;">, document.cookie)  </span><span style="color:#6A737D;">// a=100;b=200</span></span>
<span class="line"><span style="color:#6A737D;">// 同一个key会覆盖,不同key会追加</span></span>
<span class="line"><span style="color:#E1E4E8;">document.cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;b=300&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cookie&quot;</span><span style="color:#E1E4E8;">, document.cookie)  </span><span style="color:#6A737D;">// a=100;b=300</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// cookie以分号分割，以键值对的形式存储</span></span>
<span class="line"><span style="color:#6A737D;">// cookie只能赋值一个</span></span>
<span class="line"><span style="color:#24292E;">document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a=100;b=200&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置cookie</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cookie&quot;</span><span style="color:#24292E;">, document.cookie)  </span><span style="color:#6A737D;">// 获取cookie a=100</span></span>
<span class="line"><span style="color:#24292E;">document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b=200&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cookie&quot;</span><span style="color:#24292E;">, document.cookie)  </span><span style="color:#6A737D;">// a=100;b=200</span></span>
<span class="line"><span style="color:#6A737D;">// 同一个key会覆盖,不同key会追加</span></span>
<span class="line"><span style="color:#24292E;">document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b=300&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cookie&quot;</span><span style="color:#24292E;">, document.cookie)  </span><span style="color:#6A737D;">// a=100;b=300</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>登陆的时候经常会用cookie实现 <ul><li>在请求头里面假如有个userid，服务端可以获取到这个值，就知道这个用户了</li></ul></li><li>只要cookie不清除，刷新cookie依旧存在，所以可以做本地存储</li><li>在html5之前唯一能做本地存储的api</li><li>但cookie最初的设定不是做本地存储，主要用来浏览器和服务端进行通讯 <ul><li>只是被借用来做本地存储</li></ul></li></ul></li><li>cookie缺点 <ul><li>存储大小，最大4kb <ul><li>如果每次请求都把cookie带上，存储的值很多，网速又慢，会很麻烦</li></ul></li><li>http请求时需要发送到服务端，增加请求数据量 <ul><li>cookie做本地存储的话，存的东西在每次请求的时候都会被带到服务器上去</li></ul></li><li>只能用<code>document.cookie=&quot;...&quot;</code>修改，太过简陋</li></ul></li></ul><h3 id="_2-2-localstorage和sessionstorage" tabindex="-1">2.2. localStorage和sessionStorage <a class="header-anchor" href="#_2-2-localstorage和sessionstorage" aria-label="Permalink to &quot;2.2. localStorage和sessionStorage&quot;">​</a></h3><ul><li>简述 <ul><li>HTML5专门为存储设计的，最大可存5M <ul><li>5M是针对每个域名来说的</li></ul></li><li>API简单易用 =&gt; setItem、getItem <ul><li>很多key...value...的库，都是用get、set这种形式的api</li></ul></li><li>不会随http请求被发送出去</li></ul></li><li>代码示例<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 存储的都是字符串的形式</span></span>
<span class="line"><span style="color:#E1E4E8;">localStorage.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 设置localStorage</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;localStorage&#39;</span><span style="color:#E1E4E8;">, localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// 获取localStorage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sessionStorage.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 设置sessionStorage</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sessionStorage&#39;</span><span style="color:#E1E4E8;">, sessionStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// 获取sessionStorage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 存储的都是字符串的形式</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 设置localStorage</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;localStorage&#39;</span><span style="color:#24292E;">, localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// 获取localStorage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sessionStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 设置sessionStorage</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;sessionStorage&#39;</span><span style="color:#24292E;">, sessionStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// 获取sessionStorage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li>区别 <ul><li>localStorage数据会永久存储，除非代码或手动删除</li><li>sessionStorage数据只存在于当前会话，浏览器关闭则清空</li><li>一般用localStorage会更多一些</li></ul></li></ul>`,9),p=[e];function t(c,r,i,y,E,u){return a(),o("div",null,p)}const b=s(n,[["render",t]]);export{g as __pageData,b as default};
