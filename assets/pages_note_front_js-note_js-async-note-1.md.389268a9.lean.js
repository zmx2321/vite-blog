import{_ as a,o as l,c as p,e as n,b as s}from"./app.b7d5c9fe.js";const d=JSON.parse('{"title":"js中的异步","description":"","frontmatter":{},"headers":[],"relativePath":"pages/note/front/js-note/js-async-note-1.md","filePath":"pages/note/front/js-note/js-async-note-1.md","lastUpdated":1700187933000}'),o={name:"pages/note/front/js-note/js-async-note-1.md"},e=n("",29),c=s("ul",null,[s("li",{commit:""},"action中默认第一个参数为content，content.commit，即这里的"),s("li",null,"return new Promise((resolve, reject) 返回一个promise，模拟一个异步操作"),s("li",null,"Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。"),s("li",null,"在新建 promise 的时候就传入了两个参数这两个参数用来标记 promise的状态的，这两个参数是两个方法，并且这两个参数可以随意命名，"),s("li",null,"当执行到 resolve()这个方法的时候，就改变promise的状态为fullfiled ，当状态为 fuulfiled的时候就可以执行.then()"),s("li",null,"当执行到 reject() 这个方法的时候，就改变 promise 的状态为reject，当 promise 为reject 就可以.catch() 这个promise了"),s("li",null,"然后这两个方法可以带上参数，用于.then() 或者 .catch() 中使用。所以这两个方法不是替代，或者是执行什么，"),s("li",null,"他们的作用就是 用于改变promise 的状态。然后，因为状态改变了，所以才可以执行相应的 .then() 和 .catch()操作。")],-1),r=n("",1),t=[e,c,r];function E(y,i,b,u,F,m){return l(),p("div",null,t)}const D=a(o,[["render",E]]);export{d as __pageData,D as default};
