import{_ as l,o as i,c as e,e as a}from"./app.6f8159a9.js";const p=JSON.parse('{"title":"汇总已知的前端概念","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/accumulate/interview-accumulate-1.md","filePath":"pages/interview/accumulate/interview-accumulate-1.md","lastUpdated":1700122230000}'),t={name:"pages/interview/accumulate/interview-accumulate-1.md"},o=a(`<h1 id="汇总已知的前端概念" tabindex="-1">汇总已知的前端概念 <a class="header-anchor" href="#汇总已知的前端概念" aria-label="Permalink to &quot;汇总已知的前端概念&quot;">​</a></h1><h2 id="_1-css以及html相关概念" tabindex="-1">1. CSS以及Html相关概念 <a class="header-anchor" href="#_1-css以及html相关概念" aria-label="Permalink to &quot;1. CSS以及Html相关概念&quot;">​</a></h2><h3 id="_1-1-html语义化" tabindex="-1">1.1. html语义化 <a class="header-anchor" href="#_1-1-html语义化" aria-label="Permalink to &quot;1.1. html语义化&quot;">​</a></h3><ul><li>增加代码可读性</li><li>让搜索引擎更容易识别</li></ul><h3 id="_1-2-块级元素和内联元素" tabindex="-1">1.2. 块级元素和内联元素 <a class="header-anchor" href="#_1-2-块级元素和内联元素" aria-label="Permalink to &quot;1.2. 块级元素和内联元素&quot;">​</a></h3><ul><li>块级</li><li>div、h1、h2、table、ul、ol、p等</li><li>内联 <ul><li>span、img、input、button等</li></ul></li></ul><h3 id="_1-3-盒模型宽度计算" tabindex="-1">1.3. 盒模型宽度计算 <a class="header-anchor" href="#_1-3-盒模型宽度计算" aria-label="Permalink to &quot;1.3. 盒模型宽度计算&quot;">​</a></h3><ul><li>offsetWidth = (内容宽度+内边距+边距)，无外边距</li><li>box-sizing: border-box =&gt; 如果希望盒子的宽度为offsetWidth <ul><li>不加的话width只是内容宽度</li><li>加上的话width=offsetWidth</li></ul></li></ul><h3 id="_1-4-margin纵向重叠的问题" tabindex="-1">1.4. margin纵向重叠的问题 <a class="header-anchor" href="#_1-4-margin纵向重叠的问题" aria-label="Permalink to &quot;1.4. margin纵向重叠的问题&quot;">​</a></h3><ul><li>相领元素的margin-top和margin-bottom会发生重叠</li><li>空白内容的<code>&lt;p&gt;&lt;/p&gt;</code>也会重叠</li></ul><h3 id="_1-5-对margin的top-left-right-bottom设置负值-有何效果" tabindex="-1">1.5 对margin的top/left/right/bottom设置负值，有何效果 <a class="header-anchor" href="#_1-5-对margin的top-left-right-bottom设置负值-有何效果" aria-label="Permalink to &quot;1.5 对margin的top/left/right/bottom设置负值，有何效果&quot;">​</a></h3><ul><li>margin-top和margin-left负值，元素向上，向左移动 <ul><li>正常移动</li></ul></li><li>margin-right负值，右侧元素左移，自身不受影响 <ul><li>往反方向移动，自身不受影响</li></ul></li><li>margin-bottom负值，下方元素上移，自身不受影响</li></ul><h3 id="_1-6-bfc的理解和应用-常考" tabindex="-1">1.6. BFC的理解和应用(常考) <a class="header-anchor" href="#_1-6-bfc的理解和应用-常考" aria-label="Permalink to &quot;1.6. BFC的理解和应用(常考)&quot;">​</a></h3><ul><li>概念 <ul><li>Block format context =&gt; 块级格式化上下文</li><li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li></ul></li><li>能实现BFC的方式 <ul><li>float不是none</li><li>overflow不是visible</li><li>position是absolute或fixed</li><li>display是flex或inline-block等</li></ul></li></ul><h3 id="_1-7-圣杯布局和双飞翼布局的目的" tabindex="-1">1.7. 圣杯布局和双飞翼布局的目的 <a class="header-anchor" href="#_1-7-圣杯布局和双飞翼布局的目的" aria-label="Permalink to &quot;1.7. 圣杯布局和双飞翼布局的目的&quot;">​</a></h3><ul><li>三栏布局，中间一栏最先加载和渲染(内容最重要)</li><li>两侧内容固定，中间内容随着宽度自适应</li><li>一般用于PC网页</li></ul><h3 id="_1-8-圣杯布局和双飞翼布局的技术总结" tabindex="-1">1.8. 圣杯布局和双飞翼布局的技术总结 <a class="header-anchor" href="#_1-8-圣杯布局和双飞翼布局的技术总结" aria-label="Permalink to &quot;1.8. 圣杯布局和双飞翼布局的技术总结&quot;">​</a></h3><ul><li>使用float布局</li><li>两侧使用margin负值，以便和中间内容横向重叠</li><li>防止中间内容被两侧覆盖，圣杯布局用padding，双飞翼布局用margin</li></ul><h3 id="_1-9-flex布局常用语法回顾" tabindex="-1">1.9. flex布局常用语法回顾 <a class="header-anchor" href="#_1-9-flex布局常用语法回顾" aria-label="Permalink to &quot;1.9. flex布局常用语法回顾&quot;">​</a></h3><ul><li>flex-direction =&gt; 横向或者纵向</li><li>justify-content =&gt; 主轴对齐方式(水平对齐) (从开始/结束对齐、居中对齐、两边对齐)</li><li>align-items =&gt; 交叉轴对齐方式(垂直对齐) (开始/结束对齐、居中对齐)</li><li>flex-wrap =&gt; 是否换行</li><li>align-self =&gt; 子元素的对齐方式 (开始/结束对齐、居中对齐)</li></ul><h3 id="_1-10-absolute和relative分别依据什么定位" tabindex="-1">1.10. absolute和relative分别依据什么定位 <a class="header-anchor" href="#_1-10-absolute和relative分别依据什么定位" aria-label="Permalink to &quot;1.10. absolute和relative分别依据什么定位&quot;">​</a></h3><ul><li>relative依据自身定位，对外界的元素不会有什么影响</li><li>absolute依据最近一层的定位元素定位 <ul><li>定位元素 <ul><li>absolute、relative、fixed</li><li>或者直接找到body</li></ul></li></ul></li></ul><h3 id="_1-11-居中对齐有哪些实现方式-面试高频考点" tabindex="-1">1.11. 居中对齐有哪些实现方式（面试高频考点） <a class="header-anchor" href="#_1-11-居中对齐有哪些实现方式-面试高频考点" aria-label="Permalink to &quot;1.11. 居中对齐有哪些实现方式（面试高频考点）&quot;">​</a></h3><ul><li>水平居中 <ul><li>inline元素：text-align: center</li><li>block元素: margin: auto</li><li>absolute元素: left:50% + margin-left负值</li><li>absolute元素: left:50% + transformX(-50%)</li></ul></li><li>垂直居中 <ul><li>inline元素: line-height的值等于height (让行高=高)</li><li>absolute元素： <ul><li>top:50% + margin-top负值 <ul><li>必须要知道子元素的宽和高</li></ul></li><li>top:50% + transformY(-50%) <ul><li>不需要知道子元素</li></ul></li><li>top,left,bottom,right=0 + margin:auto <ul><li>既保证了浏览器兼容性，又能实现需求</li><li>不需要知道子元素的宽和高</li></ul></li></ul></li></ul></li></ul><h3 id="_1-12-line-height如何继承" tabindex="-1">1.12. line-height如何继承 <a class="header-anchor" href="#_1-12-line-height如何继承" aria-label="Permalink to &quot;1.12. line-height如何继承&quot;">​</a></h3><ul><li>写具体数值，如30px，则继承该值</li><li>写比例，如2/1.5，继承该比例 <ul><li>子元素font-size*比例</li></ul></li><li>写百分比，如200%，则继承计算出来的值(考点) =&gt; 也是个坑 <ul><li>先算完自身的行高，再进行继承</li><li>即子元素的行高为，父元素的font-size*百分比</li></ul></li></ul><h3 id="_1-13-响应式单位" tabindex="-1">1.13. 响应式单位 <a class="header-anchor" href="#_1-13-响应式单位" aria-label="Permalink to &quot;1.13. 响应式单位&quot;">​</a></h3><ul><li>rem，相对长度单位，相对于根元素(r表示root)，常用于响应式布局</li><li>px，绝对长度单位，最常用</li><li>em，相对长度单位，相对于父元素，不常用</li></ul><h3 id="_1-14-响应式的常见方案" tabindex="-1">1.14. 响应式的常见方案 <a class="header-anchor" href="#_1-14-响应式的常见方案" aria-label="Permalink to &quot;1.14. 响应式的常见方案&quot;">​</a></h3><ul><li>media-query(媒体查询), 根据不同的屏幕的宽度设置根元素</li><li>然后使用rem基于根元素的相对单位去做计算</li><li>vm/vh <ul><li>概念 <ul><li>vh =&gt; 网页视口高度的 <code>1/100</code></li><li>vw =&gt; 网页视口宽度的 <code>1/100</code></li><li>vmax =&gt; 判断网页视口宽和高，取两者最大值 <ul><li>竖屏，vh &gt; vw =&gt; 取vh为单位</li><li>横屏，vh &lt; vw =&gt; 取vw为单位</li></ul></li><li>vmin =&gt; 取两者最小值</li><li><code>window.innerHeight === 100vh</code><ul><li>浏览器中可以显示网页内容的高度</li></ul></li><li><code>window.innerWidth === 100vw</code></li></ul></li></ul></li></ul><h3 id="_1-15-其他css题" tabindex="-1">1.15. 其他css题 <a class="header-anchor" href="#_1-15-其他css题" aria-label="Permalink to &quot;1.15. 其他css题&quot;">​</a></h3><ul><li>less中的是如何定义变量的 <ul><li>使用@</li></ul></li></ul><h3 id="_1-16-flex怎么实现居中" tabindex="-1">1.16. flex怎么实现居中 <a class="header-anchor" href="#_1-16-flex怎么实现居中" aria-label="Permalink to &quot;1.16. flex怎么实现居中&quot;">​</a></h3><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.x</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">display</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">flex</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">justify-content</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">align-items</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.x</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">display</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">flex</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">justify-content</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">center</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">align-items</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">center</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-javascript相关概念" tabindex="-1">2. Javascript相关概念 <a class="header-anchor" href="#_2-javascript相关概念" aria-label="Permalink to &quot;2. Javascript相关概念&quot;">​</a></h2><h3 id="_2-1-typeof能判断哪些类型" tabindex="-1">2.1. typeof能判断哪些类型 <a class="header-anchor" href="#_2-1-typeof能判断哪些类型" aria-label="Permalink to &quot;2.1. typeof能判断哪些类型&quot;">​</a></h3><ul><li>识别所有值类型 =&gt; undefind、number、string、symbol、boolean</li><li>识别函数</li><li>判断是否是引用类型(不可再细分 object)</li></ul><h3 id="_2-2-何时使用-何时使用" tabindex="-1">2.2. 何时使用===，何时使用== <a class="header-anchor" href="#_2-2-何时使用-何时使用" aria-label="Permalink to &quot;2.2. 何时使用===，何时使用==&quot;">​</a></h3><ul><li>除了 == null之外，其他一律用 ===</li><li>x == null =&gt; x === null || x === undefind</li></ul><h3 id="_2-3-值类型和引用类型的区别" tabindex="-1">2.3. 值类型和引用类型的区别 <a class="header-anchor" href="#_2-3-值类型和引用类型的区别" aria-label="Permalink to &quot;2.3. 值类型和引用类型的区别&quot;">​</a></h3><ul><li>值类型可以直接赋值</li><li>引用类型直接赋值实际上是赋值内存地址</li></ul><h3 id="_2-4-什么是闭包-为什么要用它" tabindex="-1">2.4. 什么是闭包，为什么要用它 <a class="header-anchor" href="#_2-4-什么是闭包-为什么要用它" aria-label="Permalink to &quot;2.4. 什么是闭包，为什么要用它&quot;">​</a></h3><ul><li>其实闭包的本质就是作用域链的一个特殊的应用</li><li>闭包是指有权访问另一个函数作用域内变量的函数</li><li>创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量</li><li>闭包有两个常用的用途 <ul><li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li>函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li></ul></li></ul><h3 id="_2-5-js-的几种模块规范" tabindex="-1">2.5. js 的几种模块规范 <a class="header-anchor" href="#_2-5-js-的几种模块规范" aria-label="Permalink to &quot;2.5. js 的几种模块规范&quot;">​</a></h3><ul><li>第一种是 CommonJS 方案 <ul><li>它通过 require 来引入模块，通过 module.exports 定义模块的输出接口</li><li>这种模块加载方案是服务器端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式加载没有问题。但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适。</li></ul></li><li>第二种是 AMD 方案 <ul><li>这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范</li></ul></li><li>第三种是 CMD 方案 <ul><li>这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和require.js的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同</li></ul></li><li>第四种方案是 ES6 提出的方案，使用 import 和 export 的形式来导入导出模块。这种方案和上面三种方案都不同</li></ul><h3 id="_2-6-es6-模块与-commonjs-模块、amd、cmd-的差异" tabindex="-1">2.6. ES6 模块与 CommonJS 模块、AMD、CMD 的差异 <a class="header-anchor" href="#_2-6-es6-模块与-commonjs-模块、amd、cmd-的差异" aria-label="Permalink to &quot;2.6. ES6 模块与 CommonJS 模块、AMD、CMD 的差异&quot;">​</a></h3><ul><li>CommonJS 模块输出的是一个值的拷贝</li><li>ES6 模块输出的是值的引用</li><li>JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值</li><li>CommonJS 模块是运行时加载</li><li>ES6 模块是编译时输出接口</li><li>CommonJS 模块就是对象，即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</li></ul><h3 id="_2-7-requirejs的核心原理是什么" tabindex="-1">2.7. requireJS的核心原理是什么？ <a class="header-anchor" href="#_2-7-requirejs的核心原理是什么" aria-label="Permalink to &quot;2.7. requireJS的核心原理是什么？&quot;">​</a></h3><ul><li>require.js 的核心原理是通过动态创建 script 脚本来异步引入模块，然后对每个脚本的 load 事件进行监听，如果每个脚本都加载完成了，再调用回调函数。</li></ul><h3 id="_2-8-简述js事件循环" tabindex="-1">2.8. 简述js事件循环 <a class="header-anchor" href="#_2-8-简述js事件循环" aria-label="Permalink to &quot;2.8. 简述js事件循环&quot;">​</a></h3><ul><li>首先js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。</li><li>在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务</li><li>当同步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。</li><li>任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。</li><li>当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。</li></ul><h3 id="_2-9-arguments-的对象是什么" tabindex="-1">2.9. arguments 的对象是什么？ <a class="header-anchor" href="#_2-9-arguments-的对象是什么" aria-label="Permalink to &quot;2.9. arguments 的对象是什么？&quot;">​</a></h3><ul><li>arguments对象是函数中传递的参数值的集合。它是一个类似数组的对象</li><li>我们可以使用Array.prototype.slice将arguments对象转换成一个数组</li><li>箭头函数中没有arguments对象</li></ul><h3 id="_2-10-哪些操作会造成内存泄漏" tabindex="-1">2.10. 哪些操作会造成内存泄漏 <a class="header-anchor" href="#_2-10-哪些操作会造成内存泄漏" aria-label="Permalink to &quot;2.10. 哪些操作会造成内存泄漏&quot;">​</a></h3><ul><li>意外的全局变量</li><li>被遗忘的计时器或回调函数</li><li>脱离 DOM 的引用</li><li>闭包 <ul><li>由于作用域链的关系，闭包中的变量不会被释放，不合理的使用，有些变量没有被用到，就会造成内存泄漏</li></ul></li></ul><h3 id="_2-11-什么是函数式编程" tabindex="-1">2.11. 什么是函数式编程 <a class="header-anchor" href="#_2-11-什么是函数式编程" aria-label="Permalink to &quot;2.11. 什么是函数式编程&quot;">​</a></h3><ul><li>函数式编程是一种编程范式</li><li>函数式编程（通常缩写为FP）是通过编写纯函数，避免共享状态、可变数据、副作用 来构建软件的过程 <ul><li>纯函数的概念：一个函数的返回结果只依赖其参数，并且执行过程中没有副作用 <ul><li>它应始终返回相同的值。不管调用该函数多少次，无论今天、明天还是将来某个时候调用它</li><li>自包含（不使用全局变量）</li><li>它不应修改程序的状态或引起副作用（修改全局变量）。</li></ul></li></ul></li><li>函数式的代码往往比命令式或面向对象的代码更简洁，更可预测，更容易测试</li></ul><h3 id="_2-12-什么是高阶函数" tabindex="-1">2.12. 什么是高阶函数？ <a class="header-anchor" href="#_2-12-什么是高阶函数" aria-label="Permalink to &quot;2.12. 什么是高阶函数？&quot;">​</a></h3><ul><li>高阶函数只是将函数作为参数或返回值的函数</li></ul><h3 id="_2-13-什么是函数柯里化" tabindex="-1">2.13. 什么是函数柯里化 <a class="header-anchor" href="#_2-13-什么是函数柯里化" aria-label="Permalink to &quot;2.13. 什么是函数柯里化&quot;">​</a></h3><ul><li>函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</li></ul><h3 id="_2-14-什么是设计模式" tabindex="-1">2.14. 什么是设计模式 <a class="header-anchor" href="#_2-14-什么是设计模式" aria-label="Permalink to &quot;2.14. 什么是设计模式&quot;">​</a></h3><ul><li>概念 <ul><li>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结</li><li>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性</li></ul></li><li>设计原则（solid） <ul><li>S – Single Responsibility Principle 单一职责原则 <ul><li>一个程序只做好一件事</li><li>如果功能过于复杂就拆分开，每个部分保持独立</li></ul></li><li>O – OpenClosed Principle 开放/封闭原则 <ul><li>对扩展开放，对修改封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li></ul></li><li>L – Liskov Substitution Principle 里氏替换原则 <ul><li>子类能覆盖父类</li><li>父类能出现的地方子类就能出现</li></ul></li><li>I – Interface Segregation Principle 接口隔离原则 <ul><li>保持接口的单一独立 -类似单一职责原则，这里更关注接口</li></ul></li><li>D – Dependency Inversion Principle 依赖倒转原则 <ul><li>面向接口编程，依赖于抽象而不依赖于具象</li><li>使用方只关注接口而不关注具体类的实现</li></ul></li></ul></li></ul><h3 id="_2-15-9种前端常见的设计模式" tabindex="-1">2.15. 9种前端常见的设计模式 <a class="header-anchor" href="#_2-15-9种前端常见的设计模式" aria-label="Permalink to &quot;2.15. 9种前端常见的设计模式&quot;">​</a></h3><ul><li>外观模式 <ul><li>它为子系统中的一组接口提供一个统一的高层接口，使子系统更容易使用</li><li>比如JQuery就把复杂的原生DOM操作进行了抽象和封装，并消除了浏览器之间的兼容问题，从而提供了一个更高级更易用的版本</li></ul></li><li>代理模式 <ul><li>是为一个对象提供一个代用品或占位符，以便控制对它的访问</li><li>代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用</li></ul></li><li>工厂模式 <ul><li>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延伸到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。</li></ul></li><li>单例模式 <ul><li>单例模式中Class的实例个数最多为1</li><li>当需要一个对象去贯穿整个系统执行某些任务时，单例模式就派上了用场</li></ul></li><li>策略模式 <ul><li>策略模式简单描述就是：对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。把它们一个个封装起来，并且使它们可以互相替换</li></ul></li><li>迭代器模式 <ul><li>迭代器模式简单的说就是提供一种方法顺序一个聚合对象中各个元素，而又不暴露该对象的内部表示</li></ul></li><li>观察者模式 <ul><li>观察者模式又称发布-订阅模式（Publish/Subscribe Pattern），是我们经常接触到的设计模式，日常生活中的应用也比比皆是，比如你订阅了某个博主的频道，当有内容更新时会收到推送；又比如JavaScript中的事件订阅响应机制。观察者模式的思想用一句话描述就是：被观察对象（subject）维护一组观察者（observer），当被观察对象状态改变时，通过调用观察者的某个方法将这些变化通知到观察者。</li><li>观察者模式中Subject对象一般需要实现以下API <ul><li>subscribe(): 接收一个观察者observer对象，使其订阅自己</li><li>unsubscribe(): 接收一个观察者observer对象，使其取消订阅自己</li><li>fire(): 触发事件，通知到所有观察者</li></ul></li></ul></li><li>中介者模式 <ul><li>在中介者模式中，中介者（Mediator）包装了一系列对象相互作用的方式，使得这些对象不必直接相互作用，而是由中介者协调它们之间的交互，从而使它们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用，保证这些作用可以彼此独立的变化。</li><li>中介者模式和观察者模式有一定的相似性，都是一对多的关系，也都是集中式通信，不同的是中介者模式是处理同级对象之间的交互，而观察者模式是处理Observer和Subject之间的交互。中介者模式有些像婚恋中介，相亲对象刚开始并不能直接交流，而是要通过中介去筛选匹配再决定谁和谁见面。</li></ul></li><li>访问者模式 <ul><li>访问者模式 是一种将算法与对象结构分离的设计模式，通俗点讲就是：访问者模式让我们能够在不改变一个对象结构的前提下能够给该对象增加新的逻辑，新增的逻辑保存在一个独立的访问者对象中。访问者模式常用于拓展一些第三方的库和工具。</li></ul></li></ul><h3 id="_2-16-如何判断一个变量是数组" tabindex="-1">2.16. 如何判断一个变量是数组 <a class="header-anchor" href="#_2-16-如何判断一个变量是数组" aria-label="Permalink to &quot;2.16. 如何判断一个变量是数组&quot;">​</a></h3><ul><li><code>a instanceof Array</code></li><li>可以使用instanceof判断这个对象是否由哪个类构建出来的</li></ul><h3 id="_2-17-class的原型本质" tabindex="-1">2.17. class的原型本质 <a class="header-anchor" href="#_2-17-class的原型本质" aria-label="Permalink to &quot;2.17. class的原型本质&quot;">​</a></h3><ul><li>原型 <ul><li>每个类都有一个显示原型</li><li>每个实例都有一个隐式原型</li><li>实例的隐式原型指向对应类的显示原型</li></ul></li><li>原型链 <ul><li>子类的显示原型的隐式原型指向父类的显示原型</li></ul></li><li>属性和方法的执行规则 <ul><li>先在自身的属性和方法寻找</li><li>如果找不到则自动去__proto__(隐式原型)中查找</li></ul></li></ul><h3 id="_2-18-instanceof的工作原理" tabindex="-1">2.18. instanceof的工作原理 <a class="header-anchor" href="#_2-18-instanceof的工作原理" aria-label="Permalink to &quot;2.18. instanceof的工作原理&quot;">​</a></h3><ul><li>就按照 <code>xialuo instanceof Object</code>来说 <ul><li>instanceof前面的变量(xialuo),顺着隐式原型，一层层往上找，找到student、people、object的显示原型</li><li>如果这个隐式原型能对应到object的显示原型，那么<code>xialuo instanceof Object</code>成立</li></ul></li></ul><h3 id="_2-19-如何判断某个属性是否是某个对象的属性" tabindex="-1">2.19. 如何判断某个属性是否是某个对象的属性 <a class="header-anchor" href="#_2-19-如何判断某个属性是否是某个对象的属性" aria-label="Permalink to &quot;2.19. 如何判断某个属性是否是某个对象的属性&quot;">​</a></h3><ul><li>hasOwnProperty</li><li>hasOwnProperty属于object这个原型上的方法，js中object原型链的顶层，所以类的实例都可以使用这个方法</li></ul><h3 id="_2-20-this的不同应用场景-如何取值" tabindex="-1">2.20. this的不同应用场景，如何取值 <a class="header-anchor" href="#_2-20-this的不同应用场景-如何取值" aria-label="Permalink to &quot;2.20. this的不同应用场景，如何取值&quot;">​</a></h3><ul><li>当作普通函数被调用 <ul><li>指向window</li><li>谁调用指向谁</li></ul></li><li>使用call、apply、bind <ul><li>传入什么，指向什么</li></ul></li><li>作为对象方法调用 <ul><li>指向对象本身</li></ul></li><li>class的方法中调用 <ul><li>指向当前实例本身</li></ul></li><li>箭头函数 <ul><li>找上级作用域的值来确定</li></ul></li></ul><h3 id="_2-21-实际开发中闭包的应用场景" tabindex="-1">2.21. 实际开发中闭包的应用场景 <a class="header-anchor" href="#_2-21-实际开发中闭包的应用场景" aria-label="Permalink to &quot;2.21. 实际开发中闭包的应用场景&quot;">​</a></h3><ul><li>函数作为参数被传递</li><li>函数作为返回值被返回</li><li>即函数定义的地方和函数执行的地方不一样</li></ul><h3 id="_2-22-实际开发中闭包的应用" tabindex="-1">2.22. 实际开发中闭包的应用 <a class="header-anchor" href="#_2-22-实际开发中闭包的应用" aria-label="Permalink to &quot;2.22. 实际开发中闭包的应用&quot;">​</a></h3><ul><li>隐藏数据 <ul><li>为了避免在外部改变</li><li>例如get、set方法</li></ul></li></ul><h3 id="_2-23-同步和异步的区别是什么" tabindex="-1">2.23. 同步和异步的区别是什么 <a class="header-anchor" href="#_2-23-同步和异步的区别是什么" aria-label="Permalink to &quot;2.23. 同步和异步的区别是什么&quot;">​</a></h3><ul><li>基于JS是单线程语言</li><li>异步不会阻塞代码执行</li><li>同步会阻塞代码执行</li></ul><h3 id="_2-24-前端异步的使用场景" tabindex="-1">2.24. 前端异步的使用场景 <a class="header-anchor" href="#_2-24-前端异步的使用场景" aria-label="Permalink to &quot;2.24. 前端异步的使用场景&quot;">​</a></h3><ul><li>一些需要等待的场景 <ul><li>像事件之类的</li></ul></li><li>网络请求</li><li>定时任务</li></ul><h3 id="_2-25-简述异步运行机制" tabindex="-1">2.25. 简述异步运行机制 <a class="header-anchor" href="#_2-25-简述异步运行机制" aria-label="Permalink to &quot;2.25. 简述异步运行机制&quot;">​</a></h3><ul><li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）</li><li>主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件</li><li>一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li><li>主线程不断重复上面的第三步</li><li>event loop就是异步回调的实现原理</li></ul><h3 id="_2-26-js执行和dom渲染的关系" tabindex="-1">2.26. js执行和dom渲染的关系 <a class="header-anchor" href="#_2-26-js执行和dom渲染的关系" aria-label="Permalink to &quot;2.26. js执行和dom渲染的关系&quot;">​</a></h3><ul><li>JS和DOM渲染共用一个线程，因为JS可以修改DOM结构 <ul><li>JS执行过程中DOM渲染必须停止</li><li>DOM渲染时JS执行过程必须停止</li></ul></li></ul><h3 id="_2-27-为什么叫单线程和异步" tabindex="-1">2.27. 为什么叫单线程和异步 <a class="header-anchor" href="#_2-27-为什么叫单线程和异步" aria-label="Permalink to &quot;2.27. 为什么叫单线程和异步&quot;">​</a></h3><ul><li>异步是由单线程这个背景而来的</li><li>异步就是解决单线程等待的这个问题</li><li>异步是通过callback(回调)函数形式</li><li>网络请求或者定时任务等待的时候，cpu是空闲的，不能浪费资源，就需要异步的机制</li></ul><h3 id="_2-28-promise产生的原因是什么" tabindex="-1">2.28. promise产生的原因是什么 <a class="header-anchor" href="#_2-28-promise产生的原因是什么" aria-label="Permalink to &quot;2.28. promise产生的原因是什么&quot;">​</a></h3><ul><li>callback是促使promise产生的核心要素</li><li>promise以同步的方式写代码，可以解决callback hell（回调地狱）的难题</li><li>then就是promise原型里面的方法</li></ul><h3 id="_2-29-event-loop的过程-详细" tabindex="-1">2.29. event loop的过程（详细） <a class="header-anchor" href="#_2-29-event-loop的过程-详细" aria-label="Permalink to &quot;2.29. event loop的过程（详细）&quot;">​</a></h3><ul><li>同步代码，一行行放在call stack(调用栈)执行，调用栈执行一行，清空一行</li><li>遇到异步，会先记录下，等待时机(定时、网络请求等) <ul><li>微任务会被放到micro task queue(微任务队列)里面等待时机</li><li>宏任务会被放到Callback Queue(任务队列)里面等待时机</li></ul></li><li>先执行micro task queue(微任务队列)中的微任务</li><li>尝试DOM渲染</li><li>时机到了，就移动到Callback Queue(回调函数队列)</li><li>如果call stack(调用栈)为空(即同步代码执行完)，Event Loop开始工作</li><li>轮询查找回调函数队列，如果有则移动到执行栈执行 <ul><li>即执行宏任务</li></ul></li><li>然后继续轮询查找(永动机一样) <ul><li>这样异步就可以永远执行下去</li></ul></li></ul><h3 id="_2-30-宏任务、微任务和dom渲染的关系" tabindex="-1">2.30. 宏任务、微任务和DOM渲染的关系 <a class="header-anchor" href="#_2-30-宏任务、微任务和dom渲染的关系" aria-label="Permalink to &quot;2.30. 宏任务、微任务和DOM渲染的关系&quot;">​</a></h3><ul><li>微任务 =&gt; DOM渲染 =&gt; 宏任务</li></ul><h3 id="_2-31-宏任务有哪些-微任务有哪些-为什么微任务触发时机更早" tabindex="-1">2.31. 宏任务有哪些？微任务有哪些？为什么微任务触发时机更早 <a class="header-anchor" href="#_2-31-宏任务有哪些-微任务有哪些-为什么微任务触发时机更早" aria-label="Permalink to &quot;2.31. 宏任务有哪些？微任务有哪些？为什么微任务触发时机更早&quot;">​</a></h3><ul><li>微任务是ES6语法规定的 <ul><li>Promise、async/await</li></ul></li><li>宏任务是由浏览器规定的 <ul><li>setTimeout、setInterval、Ajax、DOM事件</li></ul></li></ul><h3 id="_2-32-微任务、宏任务和dom渲染-在event-loop的过程" tabindex="-1">2.32. 微任务、宏任务和DOM渲染，在event loop的过程 <a class="header-anchor" href="#_2-32-微任务、宏任务和dom渲染-在event-loop的过程" aria-label="Permalink to &quot;2.32. 微任务、宏任务和DOM渲染，在event loop的过程&quot;">​</a></h3><ul><li>微任务会被放到micro task queue(微任务队列)里面等待时机</li><li>宏任务会被放到Callback Queue(任务队列)里面等待时机</li><li>调用栈被清空之后(同步代码执行完)</li><li>先执行微任务(不会走web api，直接执行) <ul><li>微任务被一个个拖到调用栈</li></ul></li><li>微任务执行完毕之后，尝试DOM渲染</li><li>尝试DOM渲染之后，触发event loop(事件轮询机制)(永动机) <ul><li>执行宏任务 <ul><li>宏任务被一个个拖到调用栈</li></ul></li></ul></li></ul><h3 id="_2-33-dom中节点属性" tabindex="-1">2.33. dom中节点属性 <a class="header-anchor" href="#_2-33-dom中节点属性" aria-label="Permalink to &quot;2.33. dom中节点属性&quot;">​</a></h3><ul><li>dom =&gt; 文档对象模型的集合</li><li>property：修改的是js变量的属性，不会体现到html结构中 <ul><li><code>p.style.color = &#39;#f0f&#39;</code></li></ul></li><li>attribute：他是真正作用到dom结构里面去的，修改标签属性 <ul><li><code>p.setAttribute(&#39;data-name&#39;, &#39;imooc&#39;)</code></li></ul></li></ul><h3 id="_2-34-一次性插入多个dom节点-考虑性能" tabindex="-1">2.34. 一次性插入多个DOM节点，考虑性能 <a class="header-anchor" href="#_2-34-一次性插入多个dom节点-考虑性能" aria-label="Permalink to &quot;2.34. 一次性插入多个DOM节点，考虑性能&quot;">​</a></h3><ul><li>使用文档片段(createDocumentFragment)操作dom,最后将整个文档片段插入(appendChild)到dom树中</li></ul><h3 id="_2-35-dom节点操作" tabindex="-1">2.35. dom节点操作 <a class="header-anchor" href="#_2-35-dom节点操作" aria-label="Permalink to &quot;2.35. dom节点操作&quot;">​</a></h3><ul><li>新增 =&gt; createElement</li><li>删除 =&gt; removeChild</li><li>追加 =&gt; appendChild <ul><li>移动也是</li></ul></li><li>获取父节点 =&gt; parentNode</li><li>获取子节点 =&gt; childNodes</li><li>节点类型 <ul><li>nodeType <ul><li>3 =&gt; 文本类型为</li><li>1 =&gt; 标签</li></ul></li></ul></li><li>标签名称 =&gt; nodeName</li></ul><h3 id="_2-36-如何优化dom性能" tabindex="-1">2.36. 如何优化dom性能 <a class="header-anchor" href="#_2-36-如何优化dom性能" aria-label="Permalink to &quot;2.36. 如何优化dom性能&quot;">​</a></h3><ul><li>对DOM查询做缓存</li><li>将频繁操作改为一次性操作</li></ul><h3 id="_2-37-bom中有哪些api" tabindex="-1">2.37. Bom中有哪些api <a class="header-anchor" href="#_2-37-bom中有哪些api" aria-label="Permalink to &quot;2.37. Bom中有哪些api&quot;">​</a></h3><ul><li>浏览器对象模型</li><li>navigator <ul><li>navigator.userAgent =&gt; 识别浏览器类型 =&gt; 即我们常说的ua</li></ul></li><li>screen <ul><li>屏幕信息</li></ul></li><li>location <ul><li>location.href =&gt; 获取完整地址</li><li>location.protocol =&gt; 获取协议 http还是https</li><li>location.pathname =&gt; 域名</li><li>location.search =&gt; 查询参数(?后面)</li><li>location.hash =&gt; 哈希值，即#后面的东西</li></ul></li><li>history <ul><li>history.back(); // 后退</li><li>history.forward(); // 前进</li></ul></li></ul><h3 id="_2-38-描述事件冒泡的流程" tabindex="-1">2.38. 描述事件冒泡的流程 <a class="header-anchor" href="#_2-38-描述事件冒泡的流程" aria-label="Permalink to &quot;2.38. 描述事件冒泡的流程&quot;">​</a></h3><ul><li>事件会顺着触发元素往上冒泡</li><li>监听父节点的dom，点击子节点会触发父节点的事件，如果监听body的点击事件，那么在dom树中body下任意元素触发点击事件，都会冒泡到body的事件中 <ul><li>即代理</li></ul></li></ul><h3 id="_2-39-无限下拉的图片列表-如何监听每个图片的点击" tabindex="-1">2.39. 无限下拉的图片列表，如何监听每个图片的点击 <a class="header-anchor" href="#_2-39-无限下拉的图片列表-如何监听每个图片的点击" aria-label="Permalink to &quot;2.39. 无限下拉的图片列表，如何监听每个图片的点击&quot;">​</a></h3><ul><li>使用事件代理，监听父元素，通过父元素的监听获取子元素内容</li><li>使用event.target获取触发元素</li><li>使用matches来判断是否触发元素</li></ul><h3 id="_2-40-阻止冒泡和阻止默认行为分别是什么" tabindex="-1">2.40. 阻止冒泡和阻止默认行为分别是什么 <a class="header-anchor" href="#_2-40-阻止冒泡和阻止默认行为分别是什么" aria-label="Permalink to &quot;2.40. 阻止冒泡和阻止默认行为分别是什么&quot;">​</a></h3><ul><li>event.stopPropagation() =&gt; 阻止冒泡</li><li>event.preventDefault() =&gt; 阻止默认行为 <ul><li>例如a标签</li></ul></li></ul><h3 id="_2-41-事件代理的意义" tabindex="-1">2.41. 事件代理的意义 <a class="header-anchor" href="#_2-41-事件代理的意义" aria-label="Permalink to &quot;2.41. 事件代理的意义&quot;">​</a></h3><ul><li>代码简洁 <ul><li>不需要给每个节点设置id，还减少了dom查询</li></ul></li><li>减少浏览器内存占用 <ul><li>如果子节点数量过多，每个节点都去监听，会十分损耗内存</li></ul></li><li>但是不能滥用 <ul><li>对于瀑布流这些子节点很多的可以使用，其他不建议</li><li>类似一个按钮的绑定使用代理显得复杂</li></ul></li></ul><h3 id="_2-42-跨域的常用实现方式" tabindex="-1">2.42. 跨域的常用实现方式 <a class="header-anchor" href="#_2-42-跨域的常用实现方式" aria-label="Permalink to &quot;2.42. 跨域的常用实现方式&quot;">​</a></h3><ul><li>JSONP <ul><li><code>&lt;script&gt;</code>可绕过跨域限制</li><li>server端可以动态拼接一些信息返回</li></ul></li><li>CROS <ul><li>纯服务端</li><li>主要设置响应头</li></ul></li><li>proxy代理</li></ul><h3 id="_2-43-xhr的状态码有哪些" tabindex="-1">2.43. xhr的状态码有哪些 <a class="header-anchor" href="#_2-43-xhr的状态码有哪些" aria-label="Permalink to &quot;2.43. xhr的状态码有哪些&quot;">​</a></h3><ul><li>xhr.readyState =&gt; xhr的状态 <ul><li>0 =&gt; (未初始化) 还没有调用send方法</li><li>1 =&gt; (载入) 已调用send()方法，正在发送请求</li><li>2 =&gt; (载入完成) send()方法执行完成，已经接收到全部响应内容</li><li>3 =&gt; (交互) 正在解析响应内容</li><li>4 =&gt; (完成) 响应内容解析完成，可以在客户端调用</li></ul></li><li>xhr.status =&gt; http协议的状态码 <ul><li>2xx =&gt; 表示成功处理请求，如200</li><li>3xx =&gt; 需要重定向，浏览器直接跳转，如301、302、304 <ul><li>重定向不需要我们自己处理，服务器返回浏览器自己会去跳页面</li><li>301表示永久重定向</li><li>301表示临时重定向</li><li>304表示资源未改变 <ul><li>资源没有改变，浏览器就会用自己缓存的资源</li></ul></li></ul></li><li>4xx =&gt; 客户端请求错误，如404、403 <ul><li>404表示请求的地址有错误</li><li>403表示客户端没有权限</li></ul></li><li>5xx =&gt; 服务端错误</li></ul></li></ul><h3 id="_2-44-promise中then和catch对状态的影响" tabindex="-1">2.44. promise中then和catch对状态的影响 <a class="header-anchor" href="#_2-44-promise中then和catch对状态的影响" aria-label="Permalink to &quot;2.44. promise中then和catch对状态的影响&quot;">​</a></h3><ul><li>无论是then还是catch，只要里面没有报错，返回的就是resolved状态的promise，只要有报错，返回的就是rejected状态的promise</li></ul><h3 id="_2-45-async-await和promise的关系" tabindex="-1">2.45. async/await和Promise的关系 <a class="header-anchor" href="#_2-45-async-await和promise的关系" aria-label="Permalink to &quot;2.45. async/await和Promise的关系&quot;">​</a></h3><ul><li>async函数他是封装promise的，返回的是Promise对象</li><li>await相当于promise的then，处理promise成功的情况</li><li>在async函数中，promise状态为失败的情况，需要用try...catch捕获</li></ul><h3 id="_2-46-for-of和for-in的区别" tabindex="-1">2.46. for...of和for...in的区别 <a class="header-anchor" href="#_2-46-for-of和for-in的区别" aria-label="Permalink to &quot;2.46. for...of和for...in的区别&quot;">​</a></h3><ul><li>for...in(以及forEach、for)是常规的同步遍历</li><li>for...of常用于异步的遍历</li></ul><h3 id="_2-47-防抖机制简述" tabindex="-1">2.47. 防抖机制简述 <a class="header-anchor" href="#_2-47-防抖机制简述" aria-label="Permalink to &quot;2.47. 防抖机制简述&quot;">​</a></h3><ul><li>防抖机制指的是频繁输入或者频繁操作的时候，最后触发</li><li>监听输入框，键盘事件停止一段时间后出发</li></ul><h3 id="_2-48-节流机制简述" tabindex="-1">2.48. 节流机制简述 <a class="header-anchor" href="#_2-48-节流机制简述" aria-label="Permalink to &quot;2.48. 节流机制简述&quot;">​</a></h3><ul><li>节流机制指的是频繁输入或者频繁操作的时候，保持一个频率，连续触发</li><li>图片拖拽，监听拖拽事件，每隔一段时间触发</li></ul><h3 id="_2-49-var和let、const的区别" tabindex="-1">2.49. var和let、const的区别 <a class="header-anchor" href="#_2-49-var和let、const的区别" aria-label="Permalink to &quot;2.49. var和let、const的区别&quot;">​</a></h3><ul><li>var是ES5及其之前的语法，let、const是es6语法；var有变量提升</li><li>var和let是变量，可修改；const是常量，不可修改</li><li>let、const有块级作用域，var没有</li></ul><h3 id="_2-50-typeof返回哪些类型" tabindex="-1">2.50. typeof返回哪些类型 <a class="header-anchor" href="#_2-50-typeof返回哪些类型" aria-label="Permalink to &quot;2.50. typeof返回哪些类型&quot;">​</a></h3><ul><li>值类型：undefined、string、number、boolean、symbol</li><li>引用类型：object =&gt; 无法具体细分(对象或者数组) <ul><li>注意：<code>typeof null === &#39;object&#39;</code></li></ul></li><li>方法：function <ul><li>具有引用类型特点，但一般不作为引用类型的数据使用</li><li>因为function是作为一个可执行的工具去使用的</li><li>一般做数据存储或者变量定义的时候，我们一般会定义值类型或者引用类型(对象或者数组)，存储代码中的变量或者说是数据</li><li>很少在函数里面存储数据，函数是一个可执行的工具</li></ul></li></ul><h3 id="_2-51-列举强制类型转换和隐式类型转换" tabindex="-1">2.51. 列举强制类型转换和隐式类型转换 <a class="header-anchor" href="#_2-51-列举强制类型转换和隐式类型转换" aria-label="Permalink to &quot;2.51. 列举强制类型转换和隐式类型转换&quot;">​</a></h3><ul><li>强制类型转换：parseInt、parseFloat、toString等</li><li>隐式类型转换：if、逻辑运算、==、+拼接字符串</li></ul><h3 id="_2-52-split-和join-的区别" tabindex="-1">2.52. split()和join()的区别 <a class="header-anchor" href="#_2-52-split-和join-的区别" aria-label="Permalink to &quot;2.52. split()和join()的区别&quot;">​</a></h3><ul><li>split() <ul><li>将字符串以-分割，形成数组</li></ul></li><li>join() <ul><li>将数组以-拼接，形成字符串</li></ul></li></ul><h3 id="_2-53-数组的pop、push、unshift、shift分别做什么" tabindex="-1">2.53. 数组的pop、push、unshift、shift分别做什么 <a class="header-anchor" href="#_2-53-数组的pop、push、unshift、shift分别做什么" aria-label="Permalink to &quot;2.53. 数组的pop、push、unshift、shift分别做什么&quot;">​</a></h3><ul><li>pop <ul><li>刨除数组最后一项</li><li>返回数组最后一项</li><li>会改变原数组</li></ul></li><li>shift <ul><li>刨除数组第一项</li><li>返回数组第一项</li><li>会改变原数组</li></ul></li><li>push <ul><li>往后追加</li><li>返回 length</li><li>会改变原数组</li></ul></li><li>unshift <ul><li>往前追加</li><li>返回 length</li><li>会改变原数组</li></ul></li><li>延伸</li><li>数组操作分纯函数和非纯函数</li><li>纯函数的要求 <ul><li>不改变源数组（没有副作用）</li><li>有返回值，且函数的返回结果只依赖于它的参数</li><li>纯函数在react里面是一个特别重要的概念</li></ul></li><li>数组的api有哪些是纯函数 <ul><li>concat</li><li>map</li><li>filter</li><li>slice</li></ul></li><li>数组的api有哪些是非纯函数 <ul><li>push pop shift unshift</li><li>forEach =&gt; 它没有返回一个数组，没什么返回值</li><li>some =&gt; 不会改变原来数组的值，也不会返回值</li><li>every =&gt; 不会改变原来数组的值，也不会返回值</li><li>reduce =&gt; 不会改变原来数组的值，也不会返回值</li></ul></li></ul><h3 id="_2-54-数组slice和splice的区别" tabindex="-1">2.54. 数组slice和splice的区别 <a class="header-anchor" href="#_2-54-数组slice和splice的区别" aria-label="Permalink to &quot;2.54. 数组slice和splice的区别&quot;">​</a></h3><ul><li>功能区别 <ul><li>slice =&gt; 切片</li><li>splice =&gt; 剪接</li></ul></li><li>参数和返回值 <ul><li>slice <ul><li>slice的参数为数组下标(从开始下标到结束下标)</li><li>根据下标截取数组 <ul><li>第一个参数是开始下标，没有结束下标就是从开始下标截取到最后</li><li>截取最后一个只要传一个参数-1就可以了</li></ul></li><li>返回值为数组，不改变原数组</li></ul></li><li>splice <ul><li>第一个参数表示开始的下标，第二个参数表示长度，后面的参数是替换的内容</li><li>根据下标，截取并替换原数组内容</li><li>返回值是数组，会改变原数组</li></ul></li></ul></li><li>是否是纯函数 <ul><li>slice是纯函数</li><li>splice不是纯函数</li></ul></li></ul><h3 id="_2-55-ajax请求get和post的区别" tabindex="-1">2.55. ajax请求get和post的区别 <a class="header-anchor" href="#_2-55-ajax请求get和post的区别" aria-label="Permalink to &quot;2.55. ajax请求get和post的区别&quot;">​</a></h3><ul><li>get一般用于查询操作，post一般用于用户提交操作</li><li>get参数拼接在url上，post放在请求体内(数据体积可更大)</li><li>安全性：post易于预防CSRF</li></ul><h3 id="_2-56-函数call和apply的区别" tabindex="-1">2.56. 函数call和apply的区别 <a class="header-anchor" href="#_2-56-函数call和apply的区别" aria-label="Permalink to &quot;2.56. 函数call和apply的区别&quot;">​</a></h3><ul><li>他们的区别主要在参数上</li><li>第一个参数是this，是一样的</li><li>call第二个的参数开始是一个一个拆分传进去的，即参数列表</li><li>第一个参数是this要指向的对象，第二个参数是数组或类数组 <ul><li><code>fn.call(this, p1, p2, p3)</code></li><li><code>fn.apply(this, arguments)</code></li></ul></li><li>两个可以相互转换，但为了方便，js做了这两种形式</li></ul><h3 id="_2-57-事件代理-委托-是什么" tabindex="-1">2.57. 事件代理(委托)是什么 <a class="header-anchor" href="#_2-57-事件代理-委托-是什么" aria-label="Permalink to &quot;2.57. 事件代理(委托)是什么&quot;">​</a></h3><ul><li>我们在上层容器去(父级)定义一个事件</li><li>根据冒泡机制和事件对象<code>(e.target)</code>去获取子集列表的元素</li><li>使用<code>stopPropagation</code>取消冒泡</li></ul><h3 id="_2-58-闭包有什么特性-有什么负面影响" tabindex="-1">2.58. 闭包有什么特性，有什么负面影响 <a class="header-anchor" href="#_2-58-闭包有什么特性-有什么负面影响" aria-label="Permalink to &quot;2.58. 闭包有什么特性，有什么负面影响&quot;">​</a></h3><ul><li>闭包有什么负面影响 <ul><li>变量会常驻内存，得不到释放 =&gt; 闭包不能乱用</li><li>变量会常驻内存，并不一定是内存泄漏，闭包有可能造成内存泄漏，但不是一定会造成内存泄漏</li><li>内存泄漏指的是，变量或者数据，在内存中，没有用了，应该被释放，但没有被释放</li></ul></li><li>闭包特性 <ul><li>变量或者对象，在闭包中，他有可能是会被用到的，我们判断不了他未来是不是会被用到，所以我们不去释放它</li><li>这不是一个bug，内存泄漏一般都是由bug造成的，但闭包是我们没法判断那个闭包的变量未来是否可用</li></ul></li></ul><h3 id="_2-59-解释jsonp原理-为何他不是真正的ajax" tabindex="-1">2.59. 解释jsonp原理，为何他不是真正的ajax <a class="header-anchor" href="#_2-59-解释jsonp原理-为何他不是真正的ajax" aria-label="Permalink to &quot;2.59. 解释jsonp原理，为何他不是真正的ajax&quot;">​</a></h3><ul><li>ajax是通过XMLHttpRequest这个api实现的，而jsonp是通过script标签实现的</li><li>jsonp的原理就是，定义一个全局函数，去访问一段js</li></ul><h3 id="_2-60-document-load和ready的区别" tabindex="-1">2.60. document load和ready的区别 <a class="header-anchor" href="#_2-60-document-load和ready的区别" aria-label="Permalink to &quot;2.60. document load和ready的区别&quot;">​</a></h3><ul><li>load是网页全部加载完才执行 <ul><li>图片、视频、iframe等</li></ul></li><li>ready是dom渲染即可执行，此时图片、视频等静态资源还没加载完 <ul><li>DOMContentLoaded事件</li><li>为了让js加载更快，一般是在ready里面去做js操作</li></ul></li></ul><h3 id="_2-61-函数声明和函数表达式的区别" tabindex="-1">2.61. 函数声明和函数表达式的区别 <a class="header-anchor" href="#_2-61-函数声明和函数表达式的区别" aria-label="Permalink to &quot;2.61. 函数声明和函数表达式的区别&quot;">​</a></h3><ul><li>概念 <ul><li>函数声明：<code>function fn(){...}</code></li><li>函数表达式：<code>const fn = function(){...}</code></li></ul></li><li>答案 <ul><li>函数声明是直接用function来定义函数的</li><li>函数表达式是通过先定义一个变量，再把它赋值给一个函数来定义函数的</li><li>函数声明会在代码执行前预加载，而函数表达式不会 <ul><li>这个预加载和变量提升是一样的</li><li>函数表达式没有变量提升</li></ul></li></ul></li></ul><h3 id="_2-62-new-object-和object-create-的区别" tabindex="-1">2.62. new Object()和Object.create()的区别 <a class="header-anchor" href="#_2-62-new-object-和object-create-的区别" aria-label="Permalink to &quot;2.62. new Object()和Object.create()的区别&quot;">​</a></h3><ul><li>{}等同于<code>new Object({})</code>，原型都是<code>Object.prototype</code></li><li><code>Object.create(null)</code>没有原型 <ul><li>他必须传参，可以传对象，也可以传null</li><li>null其实是一个空对象</li><li><code>Object.create({...})</code>没有原型的原因是他可以指定原型 <ul><li>传入一个null，就是告诉他不要有原型</li><li>传入一个对象，就是告诉他去指定原型</li></ul></li></ul></li><li>Object.create()传参之后，对象中没有值，只是将参数的对象全部将放在空对象的原型中，这是和{}最大的区别</li><li>Object.create()是创建一个空对象，然后把空对象的原型指向了传入的对象</li></ul><h3 id="_2-63-正则" tabindex="-1">2.63. 正则 <a class="header-anchor" href="#_2-63-正则" aria-label="Permalink to &quot;2.63. 正则&quot;">​</a></h3><ul><li>前后有个<code>&#39;/&#39;</code>就是一个正则表达式 <ul><li><code>^xx</code>表示以xx开头，<code>xx$</code>表示以xx结尾</li><li><code>[]</code>用来定义匹配的字符范围 <ul><li>比如<code>[a-zA-Z0-9]</code>表示相应位置的字符要匹配英文字符和数字</li><li><code>[^xx]</code>表示除了xx之外的字符</li></ul></li><li><code>{}</code>一般是用来匹配的长度 <ul><li>正则中不能加空格</li><li><code>\\s{1,3}</code>表示匹配1到3个空格</li></ul></li><li><code>{n}</code>表示匹配n次，准确的数字 <ul><li><code>o{2}</code>,表示一个字符串匹配两个o，如food</li></ul></li><li><code>{n,}</code>表示至少匹配n次 <ul><li><code>o{2,}</code>,表示一个字符串至少匹配两个o，如foooood</li></ul></li><li><code>()</code>用来提取匹配字符串 <ul><li><code>(0-9)</code>匹配数字</li><li><code>(0-9)*</code>匹配数字，可以为空(*表示0~无限)</li><li><code>(0-9)+</code>匹配数字，不能为空(+表示1~无限)</li></ul></li><li><code>\\w</code>匹配字母数字下划线 <ul><li><code>[A-Za-z0-9_]</code></li><li>大写取反</li></ul></li><li><code>\\d</code>匹配数字</li><li><code>.</code>匹配除换行符以外的任意字符</li><li><code>?</code>匹配前面的子表达式0-1次 <ul><li>等价于<code>{0, 1}</code></li></ul></li><li>如果要字符串全部满足，就加<code>/^xxx$/</code><ul><li>如果只是一部分，就不需要加</li><li>如果要字符串只满足开头，就加<code>/^xxx/</code></li><li>如果要字符串只满足结尾，就加<code>/xxx$/</code></li></ul></li><li><code>+</code> =&gt; 表达式至少出现1次，相当于 <code>{1,}</code></li><li><code>*</code> =&gt; 表达式不出现或出现任意次，相当于 <code>{0,}</code></li></ul></li></ul><h3 id="_2-64-如何用js实现继承" tabindex="-1">2.64. 如何用JS实现继承 <a class="header-anchor" href="#_2-64-如何用js实现继承" aria-label="Permalink to &quot;2.64. 如何用JS实现继承&quot;">​</a></h3><ul><li>使用class继承</li><li>使用prototype继承</li></ul><h3 id="_2-65-如何捕获js程序中的异常" tabindex="-1">2.65. 如何捕获JS程序中的异常 <a class="header-anchor" href="#_2-65-如何捕获js程序中的异常" aria-label="Permalink to &quot;2.65. 如何捕获JS程序中的异常&quot;">​</a></h3><ul><li>手动捕获异常 =&gt; 使用<code>try...catch...</code></li><li>自动捕获异常 =&gt; 使用<code>window.onerror</code></li></ul><h3 id="_2-66-获取当前页面url的参数" tabindex="-1">2.66. 获取当前页面url的参数 <a class="header-anchor" href="#_2-66-获取当前页面url的参数" aria-label="Permalink to &quot;2.66. 获取当前页面url的参数&quot;">​</a></h3><ul><li>传统方式 =&gt; <code>location.search</code><ul><li>获取？后面的内容，然后做字符串截取，用正则匹配</li></ul></li><li>新的api =&gt; <code>URLSearchParams</code><ul><li>很简单，但要考虑浏览器兼容问题</li></ul></li></ul><h3 id="_2-67-数组去重" tabindex="-1">2.67. 数组去重 <a class="header-anchor" href="#_2-67-数组去重" aria-label="Permalink to &quot;2.67. 数组去重&quot;">​</a></h3><ul><li>传统方式：遍历元素挨个比较、去重</li><li>ES6：使用Set <ul><li>特点：无序结构，且不能重复</li></ul></li><li>需要考虑计算效率 <ul><li>set不需要遍历，效率比较高</li></ul></li></ul><h3 id="_2-68-介绍一下raf" tabindex="-1">2.68. 介绍一下RAF <a class="header-anchor" href="#_2-68-介绍一下raf" aria-label="Permalink to &quot;2.68. 介绍一下RAF&quot;">​</a></h3><ul><li>RAF，全称requestAnimationFrame，他是浏览器自带的api，主要用来做动画，浏览器会自动控制，比如在一些不应该耗费性能的地方会自动暂停动画的渲染，主要就是RAF的功劳</li><li>背景 <ul><li>我们不管用js还是css执行动画，想要动画流畅，更新频率要在60帧/s，即一秒钟动画要动60次，即16.67ms更新一次视图 <ul><li>1000/60 约等于 16.67，是一个无限循环的小数</li></ul></li><li>这样人的肉眼就会觉得这个动画很流畅，不卡顿</li><li>如果用js去控制动画的话，要用setTimeout</li><li>setTimeout要手动控制频率</li><li>而RAF，浏览器会自动控制</li><li>后台标签或隐藏iframe中，RAF会暂停，而setTimeout依然执行 <ul><li>有些不应该耗费性能的地方</li><li>Chrome已经最小化了</li><li>setTimeout不是做动画用的，他主要是用来做异步定时器的</li></ul></li></ul></li></ul><h3 id="_2-69-箭头函数为什么不能new" tabindex="-1">2.69. 箭头函数为什么不能new <a class="header-anchor" href="#_2-69-箭头函数为什么不能new" aria-label="Permalink to &quot;2.69. 箭头函数为什么不能new&quot;">​</a></h3><ul><li>箭头函数没有原型属性</li><li>箭头函数是匿名函数，不能作为构造函数，不能使用new</li></ul><h2 id="_3-vue相关概念" tabindex="-1">3. Vue相关概念 <a class="header-anchor" href="#_3-vue相关概念" aria-label="Permalink to &quot;3. Vue相关概念&quot;">​</a></h2><h3 id="_3-1-vue的生命周期有哪些" tabindex="-1">3.1. vue的生命周期有哪些 <a class="header-anchor" href="#_3-1-vue的生命周期有哪些" aria-label="Permalink to &quot;3.1. vue的生命周期有哪些&quot;">​</a></h3><ul><li>beforeCreate() 在实例创建之间执行，数据未加载状态</li><li>created() 在实例创建、数据加载后，能初始化数据，dom渲染之前执行</li><li>beforeMount() 虚拟dom已创建完成，在数据渲染前最后一次更改数据</li><li>mounted() 页面、数据渲染完成，真实dom挂载完成</li><li>beforeUpadate() 重新渲染之前触发</li><li>updated() 数据已经更改完成，dom 也重新 render 完成,更改数据会陷入死循环</li><li>beforeDestory() 和 destoryed() 前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行</li></ul><h3 id="_3-2-如何实现一个路由守卫" tabindex="-1">3.2. 如何实现一个路由守卫 <a class="header-anchor" href="#_3-2-如何实现一个路由守卫" aria-label="Permalink to &quot;3.2. 如何实现一个路由守卫&quot;">​</a></h3><ul><li>使用router.beforeEach</li><li>参数 <ul><li>to =&gt; 去哪</li><li>from =&gt; 从哪来</li><li>next =&gt; 下一步</li></ul></li></ul><h3 id="_3-3-vue路由带参跳转有哪几种方法" tabindex="-1">3.3. vue路由带参跳转有哪几种方法 <a class="header-anchor" href="#_3-3-vue路由带参跳转有哪几种方法" aria-label="Permalink to &quot;3.3. vue路由带参跳转有哪几种方法&quot;">​</a></h3><ul><li>使用query <ul><li>不会在地址栏出现</li></ul></li><li>使用params <ul><li>会在地址栏出现</li></ul></li></ul><h3 id="_3-4-父子组件传值" tabindex="-1">3.4. 父子组件传值 <a class="header-anchor" href="#_3-4-父子组件传值" aria-label="Permalink to &quot;3.4. 父子组件传值&quot;">​</a></h3><ul><li>父传子 =&gt; 使用props属性传递数据</li><li>子传父 =&gt; 使用$emit自定义事件传递数据</li></ul><h3 id="_3-5-封装的axios有什么方法" tabindex="-1">3.5 封装的axios有什么方法 <a class="header-anchor" href="#_3-5-封装的axios有什么方法" aria-label="Permalink to &quot;3.5 封装的axios有什么方法&quot;">​</a></h3><ul><li>请求拦截 =&gt; Axios.interceptors.request</li><li>响应拦截 =&gt; Axios.interceptors.response</li></ul><h3 id="_3-6-vue-中的-key-到底有什么用" tabindex="-1">3.6. Vue 中的 key 到底有什么用 <a class="header-anchor" href="#_3-6-vue-中的-key-到底有什么用" aria-label="Permalink to &quot;3.6. Vue 中的 key 到底有什么用&quot;">​</a></h3><ul><li>需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，主要是为了高效的更新虚拟DOM</li></ul><h3 id="_3-7-说一下vue的双向绑定数据的原理" tabindex="-1">3.7. 说一下Vue的双向绑定数据的原理 <a class="header-anchor" href="#_3-7-说一下vue的双向绑定数据的原理" aria-label="Permalink to &quot;3.7. 说一下Vue的双向绑定数据的原理&quot;">​</a></h3><ul><li>观察者模式</li><li>vue 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调</li></ul><h3 id="_3-8-vue-如何去除url中的" tabindex="-1">3.8. Vue 如何去除url中的 <a class="header-anchor" href="#_3-8-vue-如何去除url中的" aria-label="Permalink to &quot;3.8. Vue 如何去除url中的&quot;">​</a></h3><ul><li>vue-router 默认使用 hash 模式，所以在路由加载的时候，项目中的 url 会自带 #。如果不想使用 #， 可以使用 vue-router 的另一种模式 history</li><li>需要注意的是，当我们启用 history 模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现 404 的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面</li></ul><h3 id="_3-9-对-mvc、mvvm的理解" tabindex="-1">3.9. 对 MVC、MVVM的理解 <a class="header-anchor" href="#_3-9-对-mvc、mvvm的理解" aria-label="Permalink to &quot;3.9. 对 MVC、MVVM的理解&quot;">​</a></h3><ul><li>mvc <ul><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li><li>所有通信都是单向的</li></ul></li><li>mvvm <ul><li>view model viewmodel</li><li>Model 层代表数据模型</li><li>View 代表UI 组件</li><li>ViewModel 是一个同步View 和 Model的对象（桥梁）</li></ul></li><li>mvvm主要解决了mvc中大量的DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验</li></ul><h3 id="_3-10-nexttick-是做什么的" tabindex="-1">3.10. NextTick 是做什么的 <a class="header-anchor" href="#_3-10-nexttick-是做什么的" aria-label="Permalink to &quot;3.10. NextTick 是做什么的&quot;">​</a></h3><ul><li>$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM</li><li>当你修改了data的值然后马上获取这个dom元素的值，是不能获取到更新后的值，你需要使用$nextTick这个回调，让修改后的data值渲染更新到dom元素之后在获取，才能成功。</li></ul><h3 id="_3-11-vue-组件-data-为什么必须是函数" tabindex="-1">3.11. Vue 组件 data 为什么必须是函数 <a class="header-anchor" href="#_3-11-vue-组件-data-为什么必须是函数" aria-label="Permalink to &quot;3.11. Vue 组件 data 为什么必须是函数&quot;">​</a></h3><ul><li>因为js本身的特性带来的，如果 data 是一个对象，那么由于对象本身属于引用类型，当我们修改其中的一个属性时，会影响到所有Vue实例的数据。如果将 data 作为一个函数返回一个对象，那么每一个实例的 data 属性都是独立的，不会相互影响了</li></ul><h3 id="_3-12-对-keep-alive-的了解" tabindex="-1">3.12. 对 keep-alive 的了解 <a class="header-anchor" href="#_3-12-对-keep-alive-的了解" aria-label="Permalink to &quot;3.12. 对 keep-alive 的了解&quot;">​</a></h3><ul><li>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染 <ul><li>即就是把一些经常使用的页面缓存起来，避免重复做加载渲染</li></ul></li><li>keep-alive 运用了 LRU 算法，选择最近最久未使用的组件予以淘汰。</li></ul><h3 id="_3-13-计算属性和-watch-的区别" tabindex="-1">3.13. 计算属性和 watch 的区别 <a class="header-anchor" href="#_3-13-计算属性和-watch-的区别" aria-label="Permalink to &quot;3.13. 计算属性和 watch 的区别&quot;">​</a></h3><ul><li>计算属性是自动监听依赖值的变化，从而动态返回内容，监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些事情。</li><li>当有一些数据需要随着另外一些数据变化时，建议使用computed。</li><li>当有一个通用的响应数据变化的时候，要执行一些业务逻辑或异步操作的时候建议使用watcher</li></ul><h3 id="_3-14-简述vue原理" tabindex="-1">3.14. 简述vue原理 <a class="header-anchor" href="#_3-14-简述vue原理" aria-label="Permalink to &quot;3.14. 简述vue原理&quot;">​</a></h3><ul><li>Vue的模式是m-v-vm模式，即（model-view-modelView），通过modelView作为中间层（即vm的实例），进行双向数据的绑定与变化。</li><li>通过建立虚拟dom树document.createDocumentFragment(),方法创建虚拟dom树。</li><li>一旦被监测的数据改变，会通过Object.defineProperty定义的数据拦截，截取到数据的变化。</li><li>截取到的数据变化，从而通过订阅——发布者模式，触发Watcher（观察者）,从而改变虚拟dom的中的具体数据。</li><li>最后，通过更新虚拟dom的元素值，从而改变最后渲染dom树的值，完成双向绑定</li></ul><h3 id="_3-15-vuex是什么-怎么使用-哪种功能场景使用它" tabindex="-1">3.15. vuex是什么？怎么使用？哪种功能场景使用它？ <a class="header-anchor" href="#_3-15-vuex是什么-怎么使用-哪种功能场景使用它" aria-label="Permalink to &quot;3.15. vuex是什么？怎么使用？哪种功能场景使用它？&quot;">​</a></h3><ul><li>概念 <ul><li>Vuex =&gt; vue的状态管理</li><li>store <ul><li>存储数据</li></ul></li><li>mutations <ul><li>mutations定义的方法动态修改Vuex 的 store 中的状态或数据。</li></ul></li><li>getters <ul><li>类似vue的计算属性，主要用来过滤一些数据。</li></ul></li><li>action <ul><li>actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。</li></ul></li><li>modules <ul><li>项目特别复杂的时候，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理</li></ul></li></ul></li><li>使用场景 <ul><li>登陆 <ul><li>在vuex里面存储一个数据，然后判断判断本地的数据是否登陆成功</li><li>存储登陆后的用户信息</li></ul></li><li>购物车</li><li>组件里面用的地方比较多的，跨多个组件的，会用的比较多一些</li></ul></li></ul><h3 id="_3-16-vue-js的两个核心是什么" tabindex="-1">3.16. vue.js的两个核心是什么？ <a class="header-anchor" href="#_3-16-vue-js的两个核心是什么" aria-label="Permalink to &quot;3.16. vue.js的两个核心是什么？&quot;">​</a></h3><ul><li>答：数据驱动、组件系统</li><li>数据驱动：ViewModel，保证数据和视图的一致性。</li><li>组件系统：应用类UI可以看作全部是由组件树构成的。</li></ul><h3 id="_3-17-v-model-的原理" tabindex="-1">3.17. v-model 的原理 <a class="header-anchor" href="#_3-17-v-model-的原理" aria-label="Permalink to &quot;3.17. v-model 的原理&quot;">​</a></h3><ul><li>v-model用于表单数据的双向绑定，其实它就是一个语法糖，这个背后就做了两个操作：</li><li>v-bind绑定一个value属性；</li><li>v-on指令给当前元素绑定input事件。</li></ul><h3 id="_3-18-使用过-vue-ssr-吗-说说-ssr" tabindex="-1">3.18. 使用过 Vue SSR 吗？说说 SSR？ <a class="header-anchor" href="#_3-18-使用过-vue-ssr-吗-说说-ssr" aria-label="Permalink to &quot;3.18. 使用过 Vue SSR 吗？说说 SSR？&quot;">​</a></h3><ul><li>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记&quot;激活&quot;为客户端上完全可交互的应用程序。</li><li>即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。</li></ul><h3 id="_3-19-页面刷新会触发哪些生命周期" tabindex="-1">3.19. 页面刷新会触发哪些生命周期 <a class="header-anchor" href="#_3-19-页面刷新会触发哪些生命周期" aria-label="Permalink to &quot;3.19. 页面刷新会触发哪些生命周期&quot;">​</a></h3><ul><li>经过测试发现，在页面刷新时，实例依次执行了beforeCreate(),created(),beforeMount(),mounted(),beforeUpdate(),updated()</li></ul><h3 id="_3-20-vue中双向数据绑定是如何实现的" tabindex="-1">3.20. Vue中双向数据绑定是如何实现的 <a class="header-anchor" href="#_3-20-vue中双向数据绑定是如何实现的" aria-label="Permalink to &quot;3.20. Vue中双向数据绑定是如何实现的&quot;">​</a></h3><ul><li>vue 双向数据绑定是通过 数据劫持 结合 发布订阅模式的方式来实现的， 也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；</li><li>核心：关于VUE双向数据绑定，其核心是 Object.defineProperty()方法。</li></ul><h3 id="_3-21-router有哪几种导航钩子" tabindex="-1">3.21. router有哪几种导航钩子 <a class="header-anchor" href="#_3-21-router有哪几种导航钩子" aria-label="Permalink to &quot;3.21. router有哪几种导航钩子&quot;">​</a></h3><ul><li>全局钩子函数 <ul><li>beforeEach：在路由切换开始时调用</li><li>afterEach：在每次路由切换成功进入激活阶段时被调用</li></ul></li><li>单独路由独享的钩子 <ul><li>可以再路由配置上直接定义beforeEnter 钩子</li><li>beforeRouteEnter</li><li>beforeRouteUpdate</li><li>beforeRouteLeave</li></ul></li></ul><h3 id="_3-22-vue父子组件通信" tabindex="-1">3.22. vue父子组件通信 <a class="header-anchor" href="#_3-22-vue父子组件通信" aria-label="Permalink to &quot;3.22. vue父子组件通信&quot;">​</a></h3><ul><li>父传子 =&gt; props</li><li>子传父 =&gt; $emit</li></ul><h3 id="_3-23-v-show和v-if指令的共同点和不同点" tabindex="-1">3.23. v-show和v-if指令的共同点和不同点 <a class="header-anchor" href="#_3-23-v-show和v-if指令的共同点和不同点" aria-label="Permalink to &quot;3.23. v-show和v-if指令的共同点和不同点&quot;">​</a></h3><ul><li>共同点：都能控制元素的显示和隐藏；</li><li>不同点：实现本质方法不同，v-show本质就是通过控制css中的display设置为none，控制隐藏，只会编译一次；v-if是动态的向DOM树内添加或者删除DOM元素，若初始值为false，就不会编译了。而且v-if不停的销毁和创建比较消耗性能。</li><li>总结：如果要频繁切换某节点，使用v-show(切换开销比较小，初始开销较大)。如果不需要频繁切换某节点使用v-if（初始渲染开销较小，切换开销比较大）。</li></ul><h3 id="_3-24-如何让css只在当前组件中起作用" tabindex="-1">3.24. 如何让CSS只在当前组件中起作用 <a class="header-anchor" href="#_3-24-如何让css只在当前组件中起作用" aria-label="Permalink to &quot;3.24. 如何让CSS只在当前组件中起作用&quot;">​</a></h3><ul><li>在组件中的style前面加上scoped</li></ul><h3 id="_3-25-如何获取dom" tabindex="-1">3.25. 如何获取dom <a class="header-anchor" href="#_3-25-如何获取dom" aria-label="Permalink to &quot;3.25. 如何获取dom&quot;">​</a></h3><ul><li>ref=&quot;domName&quot; 用法：this.$refs.domName</li></ul><h3 id="_3-26-父组件如何执行子组件的方法" tabindex="-1">3.26. 父组件如何执行子组件的方法 <a class="header-anchor" href="#_3-26-父组件如何执行子组件的方法" aria-label="Permalink to &quot;3.26. 父组件如何执行子组件的方法&quot;">​</a></h3><ul><li>使用ref</li></ul><h3 id="_3-27-请说出vue-cli项目中src目录每个文件夹和文件的用法" tabindex="-1">3.27. 请说出vue.cli项目中src目录每个文件夹和文件的用法 <a class="header-anchor" href="#_3-27-请说出vue-cli项目中src目录每个文件夹和文件的用法" aria-label="Permalink to &quot;3.27. 请说出vue.cli项目中src目录每个文件夹和文件的用法&quot;">​</a></h3><ul><li>assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置; app.vue是一个应用主组件；main.js是入口文件</li></ul><h3 id="_3-28-分别简述computed和watch的使用场景" tabindex="-1">3.28. 分别简述computed和watch的使用场景 <a class="header-anchor" href="#_3-28-分别简述computed和watch的使用场景" aria-label="Permalink to &quot;3.28. 分别简述computed和watch的使用场景&quot;">​</a></h3><ul><li>computed <ul><li>当一个属性受多个属性影响的时候就需要用到computed</li><li>最典型的栗子： 购物车商品结算的时候</li></ul></li><li>watch <ul><li>当一条数据影响多条数据的时候就需要用watch</li><li>栗子：搜索数据</li></ul></li></ul><h3 id="_3-29-v-if和v-for的优先级" tabindex="-1">3.29. v-if和v-for的优先级 <a class="header-anchor" href="#_3-29-v-if和v-for的优先级" aria-label="Permalink to &quot;3.29. v-if和v-for的优先级&quot;">​</a></h3><ul><li>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以，不推荐v-if和v-for同时使用。</li><li>如果v-if和v-for一起用的话，vue中的的会自动提示v-if应该放到外层去</li></ul><h3 id="_3-30-params和query的区别" tabindex="-1">3.30. params和query的区别 <a class="header-anchor" href="#_3-30-params和query的区别" aria-label="Permalink to &quot;3.30. params和query的区别&quot;">​</a></h3><ul><li>用法：query要用path来引入，params要用name来引入，接收参数都是类似的，分别是this.$route.query.name和this.$route.params.name。 url地址显示：query更加类似于我们ajax中get传参，params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示</li><li>注意点：query刷新不会丢失query里面的数据;params刷新 会 丢失 params里面的数据。</li></ul><h3 id="_3-31-created和mounted的区别" tabindex="-1">3.31. created和mounted的区别 <a class="header-anchor" href="#_3-31-created和mounted的区别" aria-label="Permalink to &quot;3.31. created和mounted的区别&quot;">​</a></h3><ul><li>created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。 mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</li></ul><h3 id="_3-32-vue获取数据在哪个周期函数" tabindex="-1">3.32. vue获取数据在哪个周期函数 <a class="header-anchor" href="#_3-32-vue获取数据在哪个周期函数" aria-label="Permalink to &quot;3.32. vue获取数据在哪个周期函数&quot;">​</a></h3><ul><li>一般 created/beforeMount/mounted 皆可.</li><li>比如如果你要操作 DOM , 那肯定 mounted 时候才能操作.</li></ul><h3 id="_3-33-mvvm-框架是什么" tabindex="-1">3.33. mvvm 框架是什么 <a class="header-anchor" href="#_3-33-mvvm-框架是什么" aria-label="Permalink to &quot;3.33. mvvm 框架是什么&quot;">​</a></h3><ul><li>vue是实现了双向数据绑定的mvvm框架，当视图改变更新模型层，当模型层改变更新视图层。在vue中，使用了双向绑定技术，就是View的变化能实时让Model发生变化，而Model的变化也能实时更新到View。</li></ul><h3 id="_3-35-vue-router-是什么-它有哪些组件" tabindex="-1">3.35. vue-router 是什么?它有哪些组件 <a class="header-anchor" href="#_3-35-vue-router-是什么-它有哪些组件" aria-label="Permalink to &quot;3.35. vue-router 是什么?它有哪些组件&quot;">​</a></h3><ul><li>vue用来写路由一个插件。router-link、router-view</li></ul><h3 id="_3-36-怎么定义-vue-router-的动态路由-怎么获取传过来的值" tabindex="-1">3.36. 怎么定义 vue-router 的动态路由? 怎么获取传过来的值？ <a class="header-anchor" href="#_3-36-怎么定义-vue-router-的动态路由-怎么获取传过来的值" aria-label="Permalink to &quot;3.36. 怎么定义 vue-router 的动态路由? 怎么获取传过来的值？&quot;">​</a></h3><ul><li>在router目录下的index.js文件中，对path属性加上/:id。 使用router对象的params.id。</li></ul><h3 id="_3-37-vue-router-有哪几种导航钩子" tabindex="-1">3.37. vue-router 有哪几种导航钩子? <a class="header-anchor" href="#_3-37-vue-router-有哪几种导航钩子" aria-label="Permalink to &quot;3.37. vue-router 有哪几种导航钩子?&quot;">​</a></h3><ul><li>答：三种，</li><li>第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。</li><li>第二种：组件内的钩子</li><li>第三种：单独路由独享组件</li></ul><h3 id="_3-38-route-和-router-的区别" tabindex="-1">3.38. $route 和 $router 的区别 <a class="header-anchor" href="#_3-38-route-和-router-的区别" aria-label="Permalink to &quot;3.38. $route 和 $router 的区别&quot;">​</a></h3><ul><li>$router是VueRouter的实例，在script标签中想要导航到不同的URL,使用$router.push方法。返回上一个历史history用$router.to(-1)</li><li>$route为当前router跳转对象。里面可以获取当前路由的name,path,query,parmas等。</li></ul><h3 id="_3-39-vue-2-0-响应式数据的原理" tabindex="-1">3.39. Vue 2.0 响应式数据的原理 <a class="header-anchor" href="#_3-39-vue-2-0-响应式数据的原理" aria-label="Permalink to &quot;3.39. Vue 2.0 响应式数据的原理&quot;">​</a></h3><ul><li>整体思路是数据劫持 + 观察者模式</li><li>对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已存在的属性），数组则是通过重写数组来实现。当页面使用对应属性时，每个属性都拥有自己的 dep 属性，存在它所依赖的 watcher （依赖收集）get，当属性变化后会通知自己对应的 watcher 去更新（派发更新）set。</li><li>Object.defineProperty 数据劫持</li><li>使用 getter 收集依赖 ，setter 通知 watcher派发更新。</li><li>watcher 发布订阅模式。</li></ul><h3 id="_3-40-vue3-0-用过吗-了解多少" tabindex="-1">3.40. Vue3.0 用过吗？了解多少？ <a class="header-anchor" href="#_3-40-vue3-0-用过吗-了解多少" aria-label="Permalink to &quot;3.40. Vue3.0 用过吗？了解多少？&quot;">​</a></h3><ul><li>响应式原理的改变 Vue3.x 使用 Proxy 取代 Vue2.x 版本的 Object.defineProperty。</li><li>组件选项声明方式 Vue3.x 使用 Composition API setup是Vue3.x新增的一个选项，他是组件内使用Composition API 的入口。</li><li>模板语法变化 slot 具名插槽语法，自定义指令v-model升级。</li><li>其他方面的更改 Suspense支持Fragment（多个根节点）和 Protal（在dom其他部分渲染组件内容）组件，针对一些特殊的场景做了处理。基于 treeShaking 优化，提供了更多的内置功能。</li></ul><h3 id="_3-41-vue3-0-和-2-0-的响应式原理区别" tabindex="-1">3.41. Vue3.0 和 2.0 的响应式原理区别 <a class="header-anchor" href="#_3-41-vue3-0-和-2-0-的响应式原理区别" aria-label="Permalink to &quot;3.41. Vue3.0 和 2.0 的响应式原理区别&quot;">​</a></h3><ul><li>Vue3.x 改用 Proxy 替代 Object.defineProperty。因为 Proxy 可以直接监听对象和数组的变化，并且有多达13种拦截方法。</li></ul><h3 id="_3-42-vue-中使用了哪些设计模式" tabindex="-1">3.42. vue 中使用了哪些设计模式？ <a class="header-anchor" href="#_3-42-vue-中使用了哪些设计模式" aria-label="Permalink to &quot;3.42. vue 中使用了哪些设计模式？&quot;">​</a></h3><ul><li>工厂模式 - 传入参数即可创建实例 <ul><li>虚拟 DOM 根据参数的不同返回基础标签的 Vnode 和组件 Vnode。</li></ul></li><li>单例模式 - 整个程序有且仅有一个实例 <ul><li>vuex 和 vue-router 的插件注册方法 install 判断如果系统存在实例就直接返回掉。</li></ul></li><li>发布-订阅模式。（vue 事件机制）</li><li>观察者模式。（响应式数据原理）</li><li>装饰器模式（@装饰器的用法）</li><li>策略模式，策略模式指对象有某个行为，但是在不同的场景中，该行为有不同的实现方案 - 比如选项的合并策略</li></ul><h3 id="_3-43-你都做过哪些-vue-的性能优化" tabindex="-1">3.43. 你都做过哪些 Vue 的性能优化？ <a class="header-anchor" href="#_3-43-你都做过哪些-vue-的性能优化" aria-label="Permalink to &quot;3.43. 你都做过哪些 Vue 的性能优化？&quot;">​</a></h3><ul><li>对象层级不要过深，否则性能就会差。</li><li>不需要响应式的数据不要放在 data 中（可以使用 Object.freeze() 冻结数据）</li><li>v-if 和 v-show 区分使用场景</li><li>computed 和 watch 区分场景使用</li><li>v-for 遍历必须加 key，key最好是id值，且避免同时使用 v-if</li><li>大数据列表和表格性能优化 - 虚拟列表 / 虚拟表格</li><li>防止内部泄露，组件销毁后把全局变量和时间销毁</li><li>图片懒加载</li><li>路由懒加载</li><li>异步路由</li><li>第三方插件的按需加载</li><li>适当采用 keep-alive 缓存组件</li><li>防抖、节流的运用</li><li>服务端渲染 SSR or 预渲染</li></ul><h3 id="_3-44-nexttick-使用场景和原理" tabindex="-1">3.44. nextTick 使用场景和原理 <a class="header-anchor" href="#_3-44-nexttick-使用场景和原理" aria-label="Permalink to &quot;3.44. nextTick 使用场景和原理&quot;">​</a></h3><ul><li>nextTick 中的回调是在下次 DOM 更新循环结束之后执行的延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。主要思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法。</li></ul><h2 id="_4-react相关概念" tabindex="-1">4. react相关概念 <a class="header-anchor" href="#_4-react相关概念" aria-label="Permalink to &quot;4. react相关概念&quot;">​</a></h2><h3 id="_4-1-react-生命周期函数" tabindex="-1">4.1. react 生命周期函数 <a class="header-anchor" href="#_4-1-react-生命周期函数" aria-label="Permalink to &quot;4.1. react 生命周期函数&quot;">​</a></h3><ul><li>componentWillMount 组件挂载前(组件渲染/加载前)</li><li>componentDidMount 组件挂载后</li><li>componentWillUpdate 组件更新前</li><li>componentDidUpdate 组件更新后</li><li>componentWillUnmount 组件卸载之前</li></ul><h2 id="_5-http以及浏览器相关概念" tabindex="-1">5. http以及浏览器相关概念 <a class="header-anchor" href="#_5-http以及浏览器相关概念" aria-label="Permalink to &quot;5. http以及浏览器相关概念&quot;">​</a></h2><h3 id="_5-1-从浏览器输入到页面展示做了什么" tabindex="-1">5.1. 从浏览器输入到页面展示做了什么 <a class="header-anchor" href="#_5-1-从浏览器输入到页面展示做了什么" aria-label="Permalink to &quot;5.1. 从浏览器输入到页面展示做了什么&quot;">​</a></h3><ul><li>过程 <ul><li>在浏览器中输入url</li><li>应用层DNS解析域名</li><li>应用层客户端发送HTTP请求</li><li>传输层TCP传输报文</li><li>网络层IP协议查询MAC地址</li><li>数据到达数据链路层</li><li>服务器接收数据</li><li>服务器响应请求</li><li>服务器返回相应文件</li><li>页面渲染</li></ul></li><li>注 <ul><li>建立TCP链接（三次握手）</li><li>服务器响应（四次挥手）</li></ul></li></ul><h3 id="_5-2-网页加载过程" tabindex="-1">5.2. 网页加载过程 <a class="header-anchor" href="#_5-2-网页加载过程" aria-label="Permalink to &quot;5.2. 网页加载过程&quot;">​</a></h3><ul><li>从输入url到渲染出页面的整个过程 <ul><li>下载资源：各个资源类型，下载过程</li><li>渲染页面：结合html、css、js等</li></ul></li><li>window.onload和DOMContentLoaded的区别 <ul><li>window.onload是资源全部加载完才能执行，包括图片</li><li>DOMContentLoaded是DOM渲染完成即可，图片可能尚未渲染</li></ul></li><li>加载资源的形式 <ul><li>网页是通过html、css、img、js等待这些形式加载资源的</li></ul></li><li>加载资源的过程 <ul><li>dns解析域名到ip =&gt; 浏览器发送http请求到服务端(三次握手) =&gt; 服务端再响应请求到客户端(四次挥手) =&gt; 渲染页面</li></ul></li><li>渲染页面过程 <ul><li>浏览器根据html代码生成DOM</li><li>浏览器根据css代码生成cssOM</li><li>将DOM Tree和cssOM整合形成Render Tree</li><li>浏览器根据Render Tree渲染页面</li><li>遇到js暂停渲染，优先执行js，执行完之后继续渲染</li></ul></li></ul><h3 id="_5-3-描述cookie、localstorage、sessionstorage区别" tabindex="-1">5.3. 描述cookie、localStorage、sessionStorage区别 <a class="header-anchor" href="#_5-3-描述cookie、localstorage、sessionstorage区别" aria-label="Permalink to &quot;5.3. 描述cookie、localStorage、sessionStorage区别&quot;">​</a></h3><ul><li>cookie <ul><li>cookie本身用于浏览器和server通讯</li><li>最初的的时候是被&quot;借用&quot;到本地存储来</li><li>每次请求都会把cookie带上，增加请求数据量</li><li>字符串的形式，以分号分割</li><li>大小只有4k</li></ul></li><li>localStorage和sessionStorage <ul><li>HTML5专门为存储设计的，最大可存5M，5M是针对每个域名来说的</li><li>localStorage数据会永久存储，除非代码或手动删除</li><li>sessionStorage数据只存在于当前会话，浏览器关闭则清空</li><li>一般用localStorage会更多一些</li></ul></li></ul><h3 id="_5-4-http常见的状态码有哪些" tabindex="-1">5.4 http常见的状态码有哪些 <a class="header-anchor" href="#_5-4-http常见的状态码有哪些" aria-label="Permalink to &quot;5.4 http常见的状态码有哪些&quot;">​</a></h3><ul><li>200 =&gt; 成功</li><li>301 =&gt; 永久重定向(配合localtion，浏览器自动处理) <ul><li>网站域名到期</li></ul></li><li>302 =&gt; 临时重定向(配合localtion，浏览器自动处理) <ul><li>浏览器访问一个地址，只有第一次会跳转到新的地址</li></ul></li><li>304 =&gt; 资源未被修改 - 重点 <ul><li>资源如果已经请求过了，服务端有可能会返回一个304，表示已经被存储到本地缓存</li></ul></li><li>404 =&gt; 资源未找到</li><li>403 =&gt; 没有权限 <ul><li>比如登陆</li></ul></li><li>500 =&gt; 服务器错误 - 最常见</li><li>504 =&gt; 网关超时 <ul><li>服务器内部在做一些操作的时候，比如链接其他服务器的时候超时了</li></ul></li></ul><h3 id="_5-5-http常见的header有哪些" tabindex="-1">5.5. http常见的header有哪些 <a class="header-anchor" href="#_5-5-http常见的header有哪些" aria-label="Permalink to &quot;5.5. http常见的header有哪些&quot;">​</a></h3><ul><li>浏览器自带的请求头 <ul><li>Accept <ul><li>浏览器可接收的数据格式</li></ul></li><li>Accept-Encoding <ul><li>浏览器可接收的压缩算法</li></ul></li><li>Connection <ul><li>keep-alive一次TCP连接重复使用</li></ul></li><li>cookie</li><li>Host <ul><li>请求的域名</li></ul></li><li>User-Agent <ul><li>浏览器信息</li></ul></li><li>Content-type <ul><li>发送数据的格式</li></ul></li></ul></li><li>浏览器自带的响应头 <ul><li>Content-type <ul><li>返回的数据格式</li></ul></li><li>Content-length <ul><li>返回数据的大小(字节)</li></ul></li><li>Content-Encoding <ul><li>返回数据的压缩算法(gzip)</li></ul></li><li>Set-Cookie <ul><li>服务端改cookie的时候，通过Set-Cookie修改</li></ul></li></ul></li><li>缓存相关的headers <ul><li>Cache-Control <ul><li>强制缓存</li><li>max-age(最大缓存时间)、no-cache(不用强制缓存)</li></ul></li><li>Expires <ul><li>强制缓存(旧版本)</li></ul></li><li>Last-Modified <ul><li>协商缓存，服务端返回，时间，单位秒</li></ul></li><li>IF-Modified-Since <ul><li>协商缓存，客户端请求，时间，单位秒</li></ul></li><li>Etag <ul><li>协商缓存，服务端返回，唯一字符串，根据资源内容计算</li></ul></li><li>If-None-Match <ul><li>协商缓存，客户端请求，唯一字符串，根据资源内容计算</li></ul></li></ul></li><li>自定义头信息 <ul><li>应用于登陆等场景</li></ul></li></ul><h3 id="_5-6-什么是restful-api" tabindex="-1">5.6. 什么是restful api <a class="header-anchor" href="#_5-6-什么是restful-api" aria-label="Permalink to &quot;5.6. 什么是restful api&quot;">​</a></h3><ul><li>传统的API设计：把每个url当作一个功能</li><li>Restful API设计：把每个url当作一个唯一的资源(标识)</li><li>post、get、patch(修改)、delete</li></ul><h3 id="_5-7-简单描述一下http的缓存机制-强制缓存-协商缓存" tabindex="-1">5.7 简单描述一下http的缓存机制(强制缓存+协商缓存) <a class="header-anchor" href="#_5-7-简单描述一下http的缓存机制-强制缓存-协商缓存" aria-label="Permalink to &quot;5.7 简单描述一下http的缓存机制(强制缓存+协商缓存)&quot;">​</a></h3><ul><li>强制缓存 <ul><li>Cache-Control</li><li>浏览器初次请求到服务器，服务端不止返回资源(结果集)，还会返回一个Cache-Control</li><li>如果有Cache-Control，浏览器会将资源缓存下来 =&gt; 浏览器的机制</li><li>后面请求的时候浏览器会看Cache-Control是否过期</li></ul></li><li>协商缓存 <ul><li>Last-Modified和Etag，304状态码</li><li>服务端判断客户端资源，是否和服务端资源一样</li><li>如果判断一致就返回304，否则返回200和最新的资源</li></ul></li></ul><h3 id="_5-8-http缓存过程详解" tabindex="-1">5.8. http缓存过程详解 <a class="header-anchor" href="#_5-8-http缓存过程详解" aria-label="Permalink to &quot;5.8. http缓存过程详解&quot;">​</a></h3><ul><li>缓存流程 <ul><li>第一种情况 <ol><li>发送http请求</li><li>如果有缓存</li><li>判断缓存是否过期 <ul><li>Cache-Control里面有个max-age，即最大缓存时间</li></ul></li><li>如果没有过期</li><li>读取缓存 =&gt; 强缓存</li><li>页面呈现</li></ol></li><li>第二种情况 <ol><li>发送http请求</li><li>如果有缓存</li><li>如果缓存过期</li><li>判断有没有Etag或Last-Modified <ul><li>可以同时存在</li></ul></li><li>如果没有，就直接向服务器发起http请求</li><li>服务器返回请求资源</li><li>页面呈现</li></ol></li><li>第三种情况 <ol><li>发送http请求</li><li>如果有缓存</li><li>如果缓存过期</li><li>判断有没有Etag或Last-Modified</li><li>如果有则向服务器发起http请求，并且带上If-None-Match或If-Modified-Since字段 <ul><li>可以同时存在</li></ul></li><li>服务器判断缓存是否可用</li><li>如果不可用，直接请求服务器资源，返回200</li><li>页面呈现</li></ol></li><li>第四种情况 <ol><li>发送http请求</li><li>如果有缓存</li><li>如果缓存过期</li><li>判断有没有Etag或Last-Modified</li><li>如果有则向服务器发起http请求，并且带上If-None-Match或If-Modified-Since字段</li><li>服务器判断缓存是否可用</li><li>如果缓存可用，返回状态码304</li><li>读取缓存(协商缓存)</li><li>页面呈现</li></ol></li></ul></li><li>注意事项 <ul><li>强制缓存判断在客户端</li><li>协商缓存判断在服务端</li></ul></li></ul><h3 id="_5-9-三种刷新操作方式-对缓存的影响" tabindex="-1">5.9. 三种刷新操作方式，对缓存的影响 <a class="header-anchor" href="#_5-9-三种刷新操作方式-对缓存的影响" aria-label="Permalink to &quot;5.9. 三种刷新操作方式，对缓存的影响&quot;">​</a></h3><ul><li>三种刷新操作 <ul><li>正常操作：地址栏输入url，跳转链接，前进后退等</li><li>手动刷新：F5(mac使用commond+r)，点击刷新按钮，右击菜单刷新</li><li>强制刷新：ctrl+F5(mac使用shift+commond+r) <ul><li>刚上线可能有一些缓存</li></ul></li></ul></li><li>不同刷新操作，不同的缓存策略 <ul><li>正常操作：强制缓存有效，协商缓存有效 <ul><li>对大部分用户都有效</li></ul></li><li>手动刷新：强制缓存失效，协商缓存有效 <ul><li>如果所用的操作都可以命中强制缓存，协商缓存就没有用了</li><li>强制缓存判断在客户端</li><li>协商缓存判断在服务端</li><li>只有协商缓存也会让页面加载地更快一些</li></ul></li><li>强制刷新，强制缓存失效，协商缓存失效 <ul><li>不管多慢，都要全部返回最新的资源</li></ul></li></ul></li></ul><h3 id="_5-10-什么是同源策略" tabindex="-1">5.10. 什么是同源策略 <a class="header-anchor" href="#_5-10-什么是同源策略" aria-label="Permalink to &quot;5.10. 什么是同源策略&quot;">​</a></h3><ul><li>协议、域名、端口，三者必须一致</li></ul><h3 id="_5-11-lru算法是什么" tabindex="-1">5.11. LRU算法是什么 <a class="header-anchor" href="#_5-11-lru算法是什么" aria-label="Permalink to &quot;5.11. LRU算法是什么&quot;">​</a></h3><ul><li>LRU 缓存淘汰策略，浏览器中的缓存是一种在本地保存资源副本，它的大小是有限的，当我们请求数过多时，缓存空间会被用满，此时，继续进行网络请求就需要确定缓存中哪些数据被保留，哪些数据被移除，这就是浏览器缓存淘汰策略，最常见的淘汰策略有 FIFO（先进先出）、LFU（最少使用）、LRU（最近最少使用）</li></ul><h2 id="_6-其他" tabindex="-1">6. 其他 <a class="header-anchor" href="#_6-其他" aria-label="Permalink to &quot;6. 其他&quot;">​</a></h2><h3 id="_6-1-git的常用命令" tabindex="-1">6.1. git的常用命令 <a class="header-anchor" href="#_6-1-git的常用命令" aria-label="Permalink to &quot;6.1. git的常用命令&quot;">​</a></h3><ul><li>添加 <ul><li>git add README.md</li></ul></li><li>查看日志 <ul><li>git log</li></ul></li><li>查看修改内容 <ul><li>git diff</li></ul></li><li>查看分支 <ul><li>git branch</li></ul></li><li>切换分支 <ul><li>git checkout xxx</li></ul></li><li>新建分支 <ul><li>git checkout -b xxx</li></ul></li><li>合并分支 <ul><li>git merge xxx</li></ul></li><li>合并如何解决冲突 <ul><li>只要是confict显示的文件都冲突了</li><li>打开编辑器(vscode)</li><li>vscode能够失败冲突，并且有快捷方式</li><li>接受当前的改变(本地)</li><li>接受传入的改变(merge的分支)</li><li>两者同时接受</li><li>解决完冲突需要进行add</li></ul></li></ul><h3 id="_6-2-性能和体验的优化" tabindex="-1">6.2. 性能和体验的优化 <a class="header-anchor" href="#_6-2-性能和体验的优化" aria-label="Permalink to &quot;6.2. 性能和体验的优化&quot;">​</a></h3><ul><li>让加载更快 <ul><li>减少资源体积，压缩代码</li><li>减少访问次数 <ul><li>合并代码、ssr服务端渲染、缓存</li><li>雪碧图</li></ul></li><li>使用更快的网络：CDN</li></ul></li><li>让渲染更快 <ul><li>CSS放在head，JS放在body最下面</li><li>懒加载</li><li>对DOM查询进行缓存</li><li>节流(throttle)、防抖(debounce) <ul><li>体验的优化</li></ul></li></ul></li></ul><h3 id="_6-3-前端性能如何优化" tabindex="-1">6.3. 前端性能如何优化 <a class="header-anchor" href="#_6-3-前端性能如何优化" aria-label="Permalink to &quot;6.3. 前端性能如何优化&quot;">​</a></h3><ul><li>原则：多使用内存、缓存，减少计算，减少网络请求</li><li>方向：加载页面、渲染页面、页面操作流畅 <ul><li>加载页面： <ul><li>减少资源体积：压缩代码</li><li>减少访问次数：合并代码、雪碧图、ssr服务端渲染、缓存</li><li>使用更快的网络：CDN</li></ul></li><li>渲染页面： <ul><li>CSS放在head，JS放在body最下面</li><li>JS用DOMContentLoaded触发</li><li>对DOM查询进行缓存</li><li>频繁DOM操作，使用代码片段合并到一起插入DOM结构</li></ul></li><li>页面操作流畅： <ul><li>动画使用requestAnimationFrame</li><li>频繁输入或者频繁操作的时候最后触发 =&gt; 防抖 =&gt; 输入框监听</li><li>频繁输入或者频繁操作的时候，保持一个频率，连续触发 =&gt; 节流 =&gt; 拖拽</li></ul></li></ul></li></ul><h3 id="_6-4-常见的web前端攻击方式有哪些-怎么预防" tabindex="-1">6.4. 常见的web前端攻击方式有哪些,怎么预防 <a class="header-anchor" href="#_6-4-常见的web前端攻击方式有哪些-怎么预防" aria-label="Permalink to &quot;6.4. 常见的web前端攻击方式有哪些,怎么预防&quot;">​</a></h3><ul><li>XSS跨站请求攻击 =&gt; 标签用特殊字符表示</li><li>XSRF跨站请求伪造 =&gt; 用post请求，并添加验证</li></ul><h3 id="_6-5-单页面应用优缺点" tabindex="-1">6.5. 单页面应用优缺点 <a class="header-anchor" href="#_6-5-单页面应用优缺点" aria-label="Permalink to &quot;6.5. 单页面应用优缺点&quot;">​</a></h3><ul><li>优点 <ul><li>良好的交互体验 <ul><li>不用刷新</li></ul></li><li>减轻服务器压力 <ul><li>服务器只用出数据就可以，不用管展示逻辑和页面合成</li></ul></li><li>良好的前后端工作分离模式 <ul><li>不用像之前一样写在后台代码中</li></ul></li><li>共用一套后端程序代码 <ul><li>不用修改后端程序代码就可以同时用于Web界面、手机、平板等多种客户端</li></ul></li></ul></li><li>缺点 <ul><li>SEO难度较高</li><li>前进、后退管理</li><li>初次加载耗时多 <ul><li>为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理，如果使用第三方库，建议使用一些大公司的CDN，因此带宽的消耗是必然的</li></ul></li></ul></li></ul><h3 id="_6-6-在开发中遇到的最大问题是什么" tabindex="-1">6.6. 在开发中遇到的最大问题是什么 <a class="header-anchor" href="#_6-6-在开发中遇到的最大问题是什么" aria-label="Permalink to &quot;6.6. 在开发中遇到的最大问题是什么&quot;">​</a></h3><ul><li>考核你解决项目问题的能力 <ul><li>avue项目 <ul><li>之前有家公司做项目用的avue，avue里面的api比较简单，也有些bug</li><li>avue主要是element-ui的集成，主要是针对一些简单的表格的，他的筛选、表格、分页都是写在一起的</li><li>但对于复杂的表格，比如一个tab页里面有两个表格全是前端维护的，表格里面有按钮，按钮点进去会触发另一个表格，表格里面还有文本框下拉框以及还有各种校验，一个下拉菜单有很多限制，触发一个下拉菜单会对表格文本框做一些禁用或者显示隐藏，点击提交会在父表格增加一条记录同时影响另外的表格，这种avue坑就有很多</li></ul></li><li>git方面有 <ul><li>由于我有段时间有管理团队，团队开发用的是git，我那时候git基本都可以用，但分支这块用的不熟，所以找时间把分支系统了解了一下</li><li>还有就是我的博客用的是github page，但现在github使用https上传很麻烦，会经常push不上去，捣鼓了很久，用ssh上传解决了</li><li>还有的就是我的博客，vuepress里面加上评论和阅读量找了一些插件</li></ul></li><li>部署项目 <ul><li>做管理的那段时间，领导要求我去部署前后端项目，在安装nginx的时候出了点问题，导致他不能访问，后来排查出来时防火墙的问题</li><li>在客户端部署nginx服务的时候，有时候因为vue项目里面的接口是走代理的，nginx也要配置相应的代理</li><li>服务器上有些东西需要加密，可以在nginx上配置密码</li><li>部署三维模型的时候，模型和项目是分开部署的，都是在nginx里面，模型的请求一直出现跨域，后来配置了nginx-cros才解决问题</li></ul></li><li>新东西 <ul><li>之前公司在做数据中台的时候需要用elk</li><li>使用es存储数据最大的问题是es如何与前端框架结合，我后来使用proxy代理的方法，然后在某个js里面封装es增删改查语法，才在项目里用起来</li><li>用node做爬虫的时候，由于有很多反爬虫机制，后来我用nightmare这个库来模拟浏览器操作，才解决了问题</li></ul></li><li>剩下的就是模型上的一些问题了 <ul><li>更多的是模型数据上的处理以及模型如何与硬件设备一一对应 <ul><li>最大的问题是模型数据如何在场景里面去使用，后面了解到3dtiles，后面慢慢摸索，可以把各种类型的像dae、obj、oggb、bim转换成3dtiles，并在页面中渲染</li><li>3维场景里面的最大问题是浏览器崩溃和锯齿，通过了解一系列cesium配置，可以把影响降低到最小</li><li>在业务场景中有的不是点击标注做的交互，要直接点击模型，后面了解到模型的单体化，和数据进行沟通交流，才把问题解决</li></ul></li></ul></li><li>最后是项目管理的一些坑 <ul><li>其实也不能说是坑，项目把控的时候要做excel表格，主要是我那时候不熟悉，后面excel熟练了一些</li></ul></li></ul></li></ul>`,299),u=[o];function r(n,h,s,c,d,m){return i(),e("div",null,u)}const f=l(t,[["render",r]]);export{p as __pageData,f as default};
