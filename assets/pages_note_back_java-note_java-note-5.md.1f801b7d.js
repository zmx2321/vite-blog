import{_ as a,o as t,c as e,e as o}from"./app.1d3e5273.js";const u=JSON.parse('{"title":"启动javaWeb服务","description":"","frontmatter":{},"headers":[],"relativePath":"pages/note/back/java-note/java-note-5.md","filePath":"pages/note/back/java-note/java-note-5.md","lastUpdated":1734423506000}'),i={name:"pages/note/back/java-note/java-note-5.md"},r=o('<h1 id="启动javaweb服务" tabindex="-1">启动javaWeb服务 <a class="header-anchor" href="#启动javaweb服务" aria-label="Permalink to &quot;启动javaWeb服务&quot;">​</a></h1><h2 id="spring-boot简介" tabindex="-1">spring boot简介 <a class="header-anchor" href="#spring-boot简介" aria-label="Permalink to &quot;spring boot简介&quot;">​</a></h2><ul><li>spring boot是基于spring框架的开源框架,其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置,尽可能减少开发者的工作量 .</li><li>spring boot更像是一个脚手架,我们可以将一些繁杂的配置工作简化起来糅合成一块儿,如果需要引入其他第三方组件,或做其他什么操作的时候,可以用spring boot来代替,而不需要那种ssm组装多配置的方式</li><li>spring框架重点在一个地方,源码里面有refresh方法,这个方法里面同时又包含了13个方法,他就是贯穿整个spring体系中很多重要的关键步骤</li></ul><h2 id="spring-boot特点" tabindex="-1">spring boot特点 <a class="header-anchor" href="#spring-boot特点" aria-label="Permalink to &quot;spring boot特点&quot;">​</a></h2><ul><li>独立运行：Spring Boot而且可以以jar包的形式独立运行，运行一个Spring Boot应用只需要通过java -jar命令来运行jar文件。</li><li>简化配置：spring boot采用约定大于配置的原则，很多配置文件都有默认值，无需再进行配置。</li><li>自动配置：spring boot根据在类路径中的jar包、类和配置文件的变化，自动配置Spring上下文。</li><li>无代码生成和XML配置：spring boot不生成代码，也不需要XML配置文件。</li></ul><h2 id="前后端流程" tabindex="-1">前后端流程 <a class="header-anchor" href="#前后端流程" aria-label="Permalink to &quot;前后端流程&quot;">​</a></h2><ul><li>客户端(即前端) =&gt; api层(get/post/put/delete) =&gt; service层(具体业务逻辑) =&gt; dao层(即数据访问层,与数据库交互,将关系型数据转化为面向对象的对象) =&gt; 数据库</li></ul><h2 id="初始化javaweb项目" tabindex="-1">初始化javaWeb项目 <a class="header-anchor" href="#初始化javaweb项目" aria-label="Permalink to &quot;初始化javaWeb项目&quot;">​</a></h2><h3 id="第一种" tabindex="-1">第一种 <a class="header-anchor" href="#第一种" aria-label="Permalink to &quot;第一种&quot;">​</a></h3><ul><li>idea新建项目 =&gt; java =&gt; intellij =&gt; 创建</li><li>选择项目 =&gt; 右上角查找 =&gt; 搜索add iframe support =&gt; 选择web application =&gt; 点击ok</li><li>选择项目 =&gt; open Module Setting =&gt; 选择librarys =&gt; 点击java =&gt; 查找tomcat路径(shift+command+.显示全部文件) =&gt; tomcat中选择lib=&gt;servelt-api.jar =&gt; 点击ok</li><li>右上角点击current file配置tomcat=&gt; edit configuration =&gt; 左边点击add =&gt; 选择本地tomcat =&gt; 选择tomcat路径 =&gt; 点击ok</li><li>选择deployment(部署) =&gt; 点击右下角fix =&gt; 点击ok</li></ul><h2 id="第二种" tabindex="-1">第二种 <a class="header-anchor" href="#第二种" aria-label="Permalink to &quot;第二种&quot;">​</a></h2><ul><li>创建jakarta项目 =&gt; 应用服务器选择tomcat =&gt; 点击next =&gt; 输入项目名称 =&gt; 点击finish</li></ul>',12),l=[r];function n(s,g,c,d,p,h){return t(),e("div",null,l)}const m=a(i,[["render",n]]);export{u as __pageData,m as default};
//# sourceMappingURL=pages_note_back_java-note_java-note-5.md.1f801b7d.js.map
