import{_ as s,o as a,c as l,e as n}from"./app.ef4be69b.js";const h=JSON.parse('{"title":"git相关笔记","description":"","frontmatter":{},"headers":[],"relativePath":"pages/note/other/git-note/git-note-1.md","filePath":"pages/note/other/git-note/git-note-1.md","lastUpdated":1703733994000}'),e={name:"pages/note/other/git-note/git-note-1.md"},o=n(`<h1 id="git相关笔记" tabindex="-1">git相关笔记 <a class="header-anchor" href="#git相关笔记" aria-label="Permalink to &quot;git相关笔记&quot;">​</a></h1><h2 id="_1-上传下载代码常用命令" tabindex="-1">1. 上传下载代码常用命令 <a class="header-anchor" href="#_1-上传下载代码常用命令" aria-label="Permalink to &quot;1. 上传下载代码常用命令&quot;">​</a></h2><ul><li><code>git clone url</code> 复制的地址</li><li><code>git pull</code> 拉取别人的代码</li><li><code>git status</code> 查看仓库状态</li><li><code>git add .</code> 除了gitignore里面的东西，其余添加到缓存区</li><li><code>git commit -m &#39;deploy&#39;</code> 将被添加到缓存区的东西提交到缓存区 加文字说明</li><li><code>git push</code> 将缓存区的的文件提交到仓库</li></ul><h2 id="_2-其他常用命令" tabindex="-1">2. 其他常用命令 <a class="header-anchor" href="#_2-其他常用命令" aria-label="Permalink to &quot;2. 其他常用命令&quot;">​</a></h2><ul><li><code>git config --global credential.helper store</code> git不输入密码</li><li>卸载重装git credentials manager <ul><li><code>git credential-manager uninstall</code> 卸载</li><li><code>git credential-manager install</code> 重装</li></ul></li></ul><h2 id="_3-查询是否使用了代理" tabindex="-1">3. 查询是否使用了代理 <a class="header-anchor" href="#_3-查询是否使用了代理" aria-label="Permalink to &quot;3. 查询是否使用了代理&quot;">​</a></h2><ul><li>git config --global http.proxy</li></ul><h2 id="_4-取消代理" tabindex="-1">4. 取消代理 <a class="header-anchor" href="#_4-取消代理" aria-label="Permalink to &quot;4. 取消代理&quot;">​</a></h2><ul><li>git config --global --unset http.proxy</li></ul><h2 id="_5-避免重复输入密码" tabindex="-1">5. 避免重复输入密码 <a class="header-anchor" href="#_5-避免重复输入密码" aria-label="Permalink to &quot;5. 避免重复输入密码&quot;">​</a></h2><ul><li><code>git config --global credential.helper store</code></li><li><code>cat ~/.git-credentials</code> =&gt; 查看账号</li></ul><h2 id="_6-git分支相关" tabindex="-1">6. git分支相关 <a class="header-anchor" href="#_6-git分支相关" aria-label="Permalink to &quot;6. git分支相关&quot;">​</a></h2><h3 id="_6-1-分支命令简述" tabindex="-1">6.1. 分支命令简述 <a class="header-anchor" href="#_6-1-分支命令简述" aria-label="Permalink to &quot;6.1. 分支命令简述&quot;">​</a></h3><ul><li><code>git branch branchName</code>(在本地创建一个命名为branchName的分支)</li><li><code>git branch</code> 查看当前自己所在的分支 <ul><li>查看本地分支</li></ul></li><li><code>git branch -a</code> 查看服务器的所有分支以及自己当前所在的分支 <ul><li>查看远程分支 (其中，remotes开头的代表是远程分支)</li></ul></li><li><code>git push origin branchName</code>(把命名为branchName的本地分支推送到服务器)</li><li><code>git checkout --track origin/branchName</code> (切换为远程服务器上的命名为branchName的远程分支)</li><li>如果你的搭档要把他本地的分支给关联到服务器上命名为branchName的远程分支，请执行以下操作 <ul><li><code>git branch --set-upstream localBranchName origin/branchName</code>  （为本地分支添加一个对应的远程分支 与之相对应）-&gt;这行命令用来关联本地的分支与服务器上的分支</li></ul></li><li>完成以上操作之后，就可以进行提交代码了，但是在提交代码之前，你要确定你当前所在的分支</li><li><code>git push origin branchName</code>（提交代码到远程服务器上命名为branchName的分支上）</li><li><code>git pull origin branchName</code> （从远程分支上拉取代码）</li></ul><h3 id="_6-2-创建并使用一个新的分支流程" tabindex="-1">6.2. 创建并使用一个新的分支流程 <a class="header-anchor" href="#_6-2-创建并使用一个新的分支流程" aria-label="Permalink to &quot;6.2. 创建并使用一个新的分支流程&quot;">​</a></h3><ol><li>创建一个分支</li></ol><ul><li><code>git branch 分支名</code></li></ul><ol start="2"><li>切换到分支 <ul><li><code>git checkout 分支名</code></li></ul></li><li>提交代码到远程服务器的分支上</li></ol><ul><li><code>git push origin 分支名</code></li></ul><ol start="4"><li>拉取远程分支内容</li></ol><ul><li><code>git pull origin 分支名</code></li></ul><ol start="5"><li>关联本地的分支与服务器上的分支</li></ol><ul><li><code>git branch --set-upstream localBranchName origin/branchName</code></li></ul><ol start="6"><li>这时候就可以直接pull和push代码了</li></ol><ul><li><code>git pull</code></li></ul><h3 id="_6-3-分支相关复杂指令" tabindex="-1">6.3. 分支相关复杂指令 <a class="header-anchor" href="#_6-3-分支相关复杂指令" aria-label="Permalink to &quot;6.3. 分支相关复杂指令&quot;">​</a></h3><ul><li>本地分支关联远程分支 <ul><li>在本地test分支上修改了代码后，需要提交到远程，这时就需要关联远程的某个远程分支</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 本地提交</span></span>
<span class="line"><span style="color:#6A737D;"> * git gui </span></span>
<span class="line"><span style="color:#6A737D;"> * push到远程</span></span>
<span class="line"><span style="color:#6A737D;"> * git push origin test:test</span></span>
<span class="line"><span style="color:#6A737D;"> * 第一次无法pull，只能push</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果不写远程分支名称，则默认和本地分支同名，这时命令为：$ git push origin test</span></span>
<span class="line"><span style="color:#6A737D;"> * 从远程pull</span></span>
<span class="line"><span style="color:#6A737D;"> * git pull origin test:test  </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 本地提交</span></span>
<span class="line"><span style="color:#6A737D;"> * git gui </span></span>
<span class="line"><span style="color:#6A737D;"> * push到远程</span></span>
<span class="line"><span style="color:#6A737D;"> * git push origin test:test</span></span>
<span class="line"><span style="color:#6A737D;"> * 第一次无法pull，只能push</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果不写远程分支名称，则默认和本地分支同名，这时命令为：$ git push origin test</span></span>
<span class="line"><span style="color:#6A737D;"> * 从远程pull</span></span>
<span class="line"><span style="color:#6A737D;"> * git pull origin test:test  </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>从远程分支上下代码 <ul><li><code>git clone -b 分支名 http://xxx/xxx.git</code></li></ul></li><li>clone远程仓库到指定目录 <ul><li><code>git clone xxx.git &quot;指定目录&quot;</code></li></ul></li></ul></li></ul><h2 id="_8-删除分支" tabindex="-1">8. 删除分支 <a class="header-anchor" href="#_8-删除分支" aria-label="Permalink to &quot;8. 删除分支&quot;">​</a></h2><ol><li>删除本地分支</li></ol><ul><li><code>git branch --delete 分支名</code><ul><li>等同于<code>git branch -d 分支名</code></li><li>该分支必须完全和它的上游分支merge完成，如果没有上游分支,必须要和HEAD完全merge</li></ul></li><li><code>git branch -D dev</code><ul><li>-D是--delete --force的缩写,这样写可以在不检查merge状态的情况下删除分支</li></ul></li></ul><ol start="2"><li>删除远程分支</li></ol><ul><li><code>git push origin --delete 分支名</code></li></ul><ol start="3"><li>删除追踪分支</li></ol><ul><li><code>git branch --delete --remotes &lt;remote&gt;/&lt;branch&gt;</code><ul><li>该操作并没有真正删除远程分支,而是删除的本地分支和远程分支的关联关系</li></ul></li></ul><h2 id="_9-使用git-config-global设置用户名和邮件" tabindex="-1">9. 使用git config --global设置用户名和邮件 <a class="header-anchor" href="#_9-使用git-config-global设置用户名和邮件" aria-label="Permalink to &quot;9. 使用git config --global设置用户名和邮件&quot;">​</a></h2><ul><li>安装好git后，在命令行或终端中使用下面的命令可以设置git自己的名字和电子邮件</li><li>这是因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git config </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">global user.name </span><span style="color:#9ECBFF;">&quot;zmx2321&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">git config </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">global user.email </span><span style="color:#9ECBFF;">&quot;zmx2321@163.com&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git config </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">global user.name </span><span style="color:#032F62;">&quot;zmx2321&quot;</span></span>
<span class="line"><span style="color:#24292E;">git config </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">global user.email </span><span style="color:#032F62;">&quot;zmx2321@163.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址</li><li>配置好之后可以查看 <ul><li><code>git config -l</code></li></ul></li><li>查看全局用户名密码</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git config </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">global user.name</span></span>
<span class="line"><span style="color:#E1E4E8;">git config </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">global user.email</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git config </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">global user.name</span></span>
<span class="line"><span style="color:#24292E;">git config </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">global user.email</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>为单一的仓库配置用户名和邮箱</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user.name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;username&quot;</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user.email</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;email&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user.name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;username&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user.email</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;email&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>查看单一仓库的配置</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user.name</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user.email</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user.name</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user.email</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_9-git-下拉警告" tabindex="-1">9. git 下拉警告 <a class="header-anchor" href="#_9-git-下拉警告" aria-label="Permalink to &quot;9. git 下拉警告&quot;">​</a></h2><ul><li>当使用git版本为2.27.0以上时，使用git pull命令出现以下的警告：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">warning: Pulling without specifying how to reconcile divergent branches is</span></span>
<span class="line"><span style="color:#e1e4e8;">discouraged. You can squelch this message by running one of the following</span></span>
<span class="line"><span style="color:#e1e4e8;">commands sometime before your next pull:</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  git config pull.rebase false  # merge (the default strategy)</span></span>
<span class="line"><span style="color:#e1e4e8;">  git config pull.rebase true   # rebase</span></span>
<span class="line"><span style="color:#e1e4e8;">  git config pull.ff only       # fast-forward only</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">You can replace &quot;git config&quot; with &quot;git config --global&quot; to set a default</span></span>
<span class="line"><span style="color:#e1e4e8;">preference for all repositories. You can also pass --rebase, --no-rebase,</span></span>
<span class="line"><span style="color:#e1e4e8;">or --ff-only on the command line to override the configured default per</span></span>
<span class="line"><span style="color:#e1e4e8;">invocation.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">warning: Pulling without specifying how to reconcile divergent branches is</span></span>
<span class="line"><span style="color:#24292e;">discouraged. You can squelch this message by running one of the following</span></span>
<span class="line"><span style="color:#24292e;">commands sometime before your next pull:</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  git config pull.rebase false  # merge (the default strategy)</span></span>
<span class="line"><span style="color:#24292e;">  git config pull.rebase true   # rebase</span></span>
<span class="line"><span style="color:#24292e;">  git config pull.ff only       # fast-forward only</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">You can replace &quot;git config&quot; with &quot;git config --global&quot; to set a default</span></span>
<span class="line"><span style="color:#24292e;">preference for all repositories. You can also pass --rebase, --no-rebase,</span></span>
<span class="line"><span style="color:#24292e;">or --ff-only on the command line to override the configured default per</span></span>
<span class="line"><span style="color:#24292e;">invocation.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li>翻译如下<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">warning: 不建议在没有为偏离分支指定合并策略时执行pull操作。 </span></span>
<span class="line"><span style="color:#e1e4e8;">您可以在执行下一次pull操作之前执行下面一条命令来抑制本消息：</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">git config pull.rebase false  # 合并（默认缺省策略）</span></span>
<span class="line"><span style="color:#e1e4e8;">git config pull.rebase true   # 变基</span></span>
<span class="line"><span style="color:#e1e4e8;">git config pull.ff only       # 仅快进</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">您可以将 &quot;git config&quot; 替换为 &quot;git config --global&quot; 以便为所有仓库设置</span></span>
<span class="line"><span style="color:#e1e4e8;">缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，</span></span>
<span class="line"><span style="color:#e1e4e8;">或者 --ff-only 参数覆盖缺省设置。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">warning: 不建议在没有为偏离分支指定合并策略时执行pull操作。 </span></span>
<span class="line"><span style="color:#24292e;">您可以在执行下一次pull操作之前执行下面一条命令来抑制本消息：</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">git config pull.rebase false  # 合并（默认缺省策略）</span></span>
<span class="line"><span style="color:#24292e;">git config pull.rebase true   # 变基</span></span>
<span class="line"><span style="color:#24292e;">git config pull.ff only       # 仅快进</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">您可以将 &quot;git config&quot; 替换为 &quot;git config --global&quot; 以便为所有仓库设置</span></span>
<span class="line"><span style="color:#24292e;">缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，</span></span>
<span class="line"><span style="color:#24292e;">或者 --ff-only 参数覆盖缺省设置。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li>解决方法 <ul><li>执行 <code>git config pull.rebase false</code></li></ul></li></ul><h2 id="_10-push文件过大" tabindex="-1">10. push文件过大 <a class="header-anchor" href="#_10-push文件过大" aria-label="Permalink to &quot;10. push文件过大&quot;">​</a></h2><ul><li><p><code>git config --global http.postBuffer 157286400</code></p><ul><li>当推送大量数据时（初始推送大型存储库，使用非常大的文件进行更改）可能需要 http.postBuffer 在 git 客户端 （而不是服务器）上设置更高的 设置 ；将 Git 缓冲区大小增加到 repo 的最大单个文件大小</li></ul><h2 id="_20-关于忽略文件-gitignore" tabindex="-1">20. 关于忽略文件.gitignore <a class="header-anchor" href="#_20-关于忽略文件-gitignore" aria-label="Permalink to &quot;20. 关于忽略文件.gitignore&quot;">​</a></h2><ul><li>我们发现直接将.env.development放入.gitignore不起作用</li><li>原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的</li><li>git清除本地缓存命令 <ul><li>git rm .env.development --cached</li></ul></li><li>git commit提交代码</li><li>此时随意修改.env.development文件，就不会受到git的跟踪了，这样每次提交都不会提交.env.development的修改到git上了</li></ul></li></ul><h2 id="_21-git提交报错" tabindex="-1">21. git提交报错 <a class="header-anchor" href="#_21-git提交报错" aria-label="Permalink to &quot;21. git提交报错&quot;">​</a></h2><ul><li>cash-config@1.0.0 l</li><li>只需要在commit 后面追加 --no-verify 就可以解决 <ul><li>git commit -m &#39;merge&#39; --no-verify</li><li>不进行校验</li></ul></li></ul>`,49),i=[o];function p(t,c,r,u,g,d){return a(),l("div",null,i)}const m=s(e,[["render",p]]);export{h as __pageData,m as default};
//# sourceMappingURL=pages_note_other_git-note_git-note-1.md.6b037129.js.map
